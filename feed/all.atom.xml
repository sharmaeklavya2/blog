<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eklavya's Blog</title><link href="https://sharmaeklavya2.github.io/blog/" rel="alternate"></link><link href="https://sharmaeklavya2.github.io/blog/feed/all.atom.xml" rel="self"></link><id>https://sharmaeklavya2.github.io/blog/</id><updated>2019-07-20T00:00:00+05:30</updated><entry><title>Generalizing Segment Trees</title><link href="https://sharmaeklavya2.github.io/blog/generalizing-segment-trees.html" rel="alternate"></link><published>2019-07-20T00:00:00+05:30</published><updated>2019-07-20T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2019-07-20:/blog/generalizing-segment-trees.html</id><summary type="html">&lt;p&gt;How I generalized segment trees by expressing range query outputs as elements of a monoid and update operations as functions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A segment tree is a data structure which stores an array of size &lt;span class="math"&gt;\(n\)&lt;/span&gt;
and allows &lt;span class="math"&gt;\(O(\log{n})\)&lt;/span&gt;-time range queries and &lt;span class="math"&gt;\(O(\log n)\)&lt;/span&gt;-time range updates on it.
I devised a method of generalizing segment trees by expressing
query outputs as elements of a monoid and update operations as functions.
This generalization not only gave me conceptual clarity
but also allowed me to write a
&lt;a href="https://gist.github.com/sharmaeklavya2/99ed35efbb639bbe7d7b46b89b74fea0"&gt;segment tree C++ library&lt;/a&gt;
that can be used for any application without modifying the code for queries and updates.&lt;/p&gt;
&lt;p&gt;This blog post explains what a monoid is,
and the intuition which led me to use these abstractions to generalize segment trees.
I'll also explain how to perform range updates using lazy propagation.&lt;/p&gt;
&lt;p&gt;Prerequisite concepts for this blog post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What a segment tree is.&lt;/li&gt;
&lt;li&gt;How to build a segment tree.&lt;/li&gt;
&lt;li&gt;How to perform range queries on a segment tree.&lt;/li&gt;
&lt;li&gt;How to perform point updates on a segment tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can read about the above prerequisite concepts in the
&lt;a href="https://codelucid.wordpress.com/2015/05/27/segment-trees/"&gt;article on Segment Trees by codelucid&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#generalizing-problems"&gt;Generalizing problems&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#query-function"&gt;Query function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update-function"&gt;Update function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#generalizing-the-query-function"&gt;Generalizing the query function&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#substructure-and-the-binary-operator"&gt;Substructure and the binary operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#associativity"&gt;Associativity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identity"&gt;Identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#monoids"&gt;Monoids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#monoid-elements-as-segment-tree-values"&gt;Monoid elements as segment tree values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c-example"&gt;C++ example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#node-update-function"&gt;Node update function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazy-propagation"&gt;Lazy propagation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#updation"&gt;Updation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#querying"&gt;Querying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-updates"&gt;Combining updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#node-update-function-family"&gt;Node update function family&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#representing-the-family"&gt;Representing the family&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c-example_1"&gt;C++ example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#generic-segment-tree-implementation"&gt;Generic segment tree implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bringing-problems-to-standard-form"&gt;Bringing problems to standard form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="generalizing-problems"&gt;Generalizing problems&lt;a class="headerlink" href="#generalizing-problems" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we generalize segment trees, let's try to generalize some simple problems
which can be solved using segment trees. These example problems are used throughout this article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Problem SUMREPL&lt;/strong&gt;:
    You are given an array &lt;span class="math"&gt;\(a\)&lt;/span&gt; of &lt;span class="math"&gt;\(n\)&lt;/span&gt; numbers, indexed from 0 to &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;.
    You will be asked to perform &lt;span class="math"&gt;\(q\)&lt;/span&gt; operations. Each operation will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt;, output &lt;span class="math"&gt;\(\sum\limits_{i=l}^r a[i]\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given &lt;span class="math"&gt;\(l\)&lt;/span&gt;, &lt;span class="math"&gt;\(r\)&lt;/span&gt; and &lt;span class="math"&gt;\(y\)&lt;/span&gt;, replace &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; by &lt;span class="math"&gt;\(y\)&lt;/span&gt; for all &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Problem MINMAX&lt;/strong&gt;:
    You are given an array &lt;span class="math"&gt;\(a\)&lt;/span&gt; of &lt;span class="math"&gt;\(n\)&lt;/span&gt; numbers, indexed from 0 to &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;.
    You will be asked to perform &lt;span class="math"&gt;\(q\)&lt;/span&gt; operations. Each operation will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt;, output &lt;span class="math"&gt;\(\min\limits_{i=l}^r a[i]\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt;, output &lt;span class="math"&gt;\(\max\limits_{i=l}^r a[i]\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given &lt;span class="math"&gt;\(l\)&lt;/span&gt;, &lt;span class="math"&gt;\(r\)&lt;/span&gt; and &lt;span class="math"&gt;\(y\)&lt;/span&gt;, add &lt;span class="math"&gt;\(y\)&lt;/span&gt; to &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; for all &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given &lt;span class="math"&gt;\(l\)&lt;/span&gt;, &lt;span class="math"&gt;\(r\)&lt;/span&gt; and &lt;span class="math"&gt;\(z\)&lt;/span&gt;, multiply &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; by &lt;span class="math"&gt;\(z\)&lt;/span&gt; for all &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Problem CHAROCC&lt;/strong&gt;:
    You are given an array &lt;span class="math"&gt;\(a\)&lt;/span&gt; of &lt;span class="math"&gt;\(n\)&lt;/span&gt; strings, indexed from 0 to &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;.
    Each string consists of lowercase English characters (&lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;).
    The sum of the lengths of the strings is &lt;span class="math"&gt;\(m\)&lt;/span&gt;.
    You will be asked to perform &lt;span class="math"&gt;\(q\)&lt;/span&gt; operations. Each operation will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given integers &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt; and character &lt;span class="math"&gt;\(c\)&lt;/span&gt;, output the number of
    occurrences of &lt;span class="math"&gt;\(c\)&lt;/span&gt; in the concatenation of &lt;span class="math"&gt;\(a[l], a[l+1], \ldots, a[r]\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given integers &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt; and character &lt;span class="math"&gt;\(c\)&lt;/span&gt;, append &lt;span class="math"&gt;\(c\)&lt;/span&gt; to &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; for all &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.
    For example, if &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; is &lt;code&gt;"car"&lt;/code&gt; and &lt;span class="math"&gt;\(c\)&lt;/span&gt; is &lt;code&gt;'t'&lt;/code&gt;, then &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; should be changed to &lt;code&gt;"cart"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see that in all these problems, we are given an array of size &lt;span class="math"&gt;\(n\)&lt;/span&gt;.
The elements of the array can be anything: numbers, strings or something else.
In these examples, there are 2 kinds of operations - queries and updates.
In all operations, we're asked to operate on a subarray &lt;span class="math"&gt;\(b = a[l..r]\)&lt;/span&gt;.
We'll generalize these operations to 2 concepts - query function and update function.&lt;/p&gt;
&lt;h3 id="query-function"&gt;Query function&lt;a class="headerlink" href="#query-function" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In queries, we're asked to apply a function &lt;span class="math"&gt;\(f\)&lt;/span&gt; on &lt;span class="math"&gt;\(b\)&lt;/span&gt;.
We'll call this function the 'query function'.
In SUMREPL, this function is summation: &lt;span class="math"&gt;\(f(b) = \sum\limits_{x \in b} x\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In MINMAX, the query function is 'min' for some queries and 'max' for others.
Instead, we can use the query function
&lt;span class="math"&gt;\(f(b) = (\min\limits_{x \in b} x, \max\limits_{x \in b})\)&lt;/span&gt;, which returns an ordered pair.
For every query, we'll compute both min and max and return the appropriate part.&lt;/p&gt;
&lt;p&gt;In CHAROCC, the query is parametrized by &lt;span class="math"&gt;\(c\)&lt;/span&gt;.
So we'll compute the result for all lowercase English characters.
Formally, let &lt;span class="math"&gt;\(\Gamma\)&lt;/span&gt; be the sequence of characters in lowercase English
and let &lt;span class="math"&gt;\(e(s, c)\)&lt;/span&gt; be the number of occurrences of the character &lt;span class="math"&gt;\(c\)&lt;/span&gt; in string &lt;span class="math"&gt;\(s\)&lt;/span&gt;.
Then &lt;span class="math"&gt;\(f(b) = [\sum\limits_{x \in b} e(x, c)]_{c \in \Gamma}\)&lt;/span&gt;.
Here &lt;span class="math"&gt;\(f(b)\)&lt;/span&gt; is an array of length 26.&lt;/p&gt;
&lt;p&gt;For these 3 examples, we now have a common abstraction to use: the query function.
The query function's domain is a set of finite arrays of some type.
Let us denote the codomain of the query function by &lt;span class="math"&gt;\(S\)&lt;/span&gt;,
which we'll call the 'query output type'.&lt;/p&gt;
&lt;h3 id="update-function"&gt;Update function&lt;a class="headerlink" href="#update-function" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In every update operation, we're given a function &lt;span class="math"&gt;\(g\)&lt;/span&gt;, called the update function.
We have to replace &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; by &lt;span class="math"&gt;\(g(a[i])\)&lt;/span&gt; for &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For SUMREPL, the update function is &lt;span class="math"&gt;\(g_y\)&lt;/span&gt;, where &lt;span class="math"&gt;\(g_y(x) = y\)&lt;/span&gt;.
For MINMAX, the update function is either &lt;span class="math"&gt;\(g_y(x) = x + y\)&lt;/span&gt; or &lt;span class="math"&gt;\(g_z(x) = xz\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now the generalized problem looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem RANGEOP&lt;/strong&gt;:
You are given an array &lt;span class="math"&gt;\(a\)&lt;/span&gt; of &lt;span class="math"&gt;\(n\)&lt;/span&gt; elements, indexed from 0 to &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;.
You are also given a query function &lt;span class="math"&gt;\(f\)&lt;/span&gt;.
You will be asked to perform &lt;span class="math"&gt;\(q\)&lt;/span&gt; operations. Each operation will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given integers &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt;, output &lt;span class="math"&gt;\(f(a[l..r])\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given integers &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt; and a function &lt;span class="math"&gt;\(g\)&lt;/span&gt;,
    replace &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; by &lt;span class="math"&gt;\(g(a[i])\)&lt;/span&gt; for all &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="generalizing-the-query-function"&gt;Generalizing the query function&lt;a class="headerlink" href="#generalizing-the-query-function" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In problem RANGEOP, &lt;span class="math"&gt;\(f\)&lt;/span&gt; can be any arbitrary function.
But there are additional constraints if the problem has to be solved using segment trees.&lt;/p&gt;
&lt;h3 id="substructure-and-the-binary-operator"&gt;Substructure and the binary operator&lt;a class="headerlink" href="#substructure-and-the-binary-operator" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be able to solve a problem using segment trees,
the query function should follow a property called 'substructure'.
This means that we can compute &lt;span class="math"&gt;\(f(a)\)&lt;/span&gt; using this procedure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose any prefix &lt;span class="math"&gt;\(b\)&lt;/span&gt; of &lt;span class="math"&gt;\(a\)&lt;/span&gt;. Let &lt;span class="math"&gt;\(a = b + c\)&lt;/span&gt; (&lt;span class="math"&gt;\(+\)&lt;/span&gt; denotes array concatenation).&lt;/li&gt;
&lt;li&gt;Compute &lt;span class="math"&gt;\(f(b)\)&lt;/span&gt; and &lt;span class="math"&gt;\(f(c)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Combine &lt;span class="math"&gt;\(f(b)\)&lt;/span&gt; and &lt;span class="math"&gt;\(f(c)\)&lt;/span&gt; to get &lt;span class="math"&gt;\(f(a)\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In SUMREPL, &lt;span class="math"&gt;\(f(b + c) = f(b) + f(c)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;In MINMAX, &lt;span class="math"&gt;\(f(b + c)\)&lt;/span&gt; &lt;span class="math"&gt;\(= (\min(f(b)_0, f(c)_0), \max(f(b)_1, f(c)_1))\)&lt;/span&gt;.
Here &lt;span class="math"&gt;\((x, y)_0 = x\)&lt;/span&gt; and &lt;span class="math"&gt;\((x, y)_1 = y\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding the median of an array doesn't have substructure
because the medians of &lt;span class="math"&gt;\(b\)&lt;/span&gt; and &lt;span class="math"&gt;\(c\)&lt;/span&gt; cannot be used to compute the median of &lt;span class="math"&gt;\(b + c\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(f(a) = a[0]^{a[1]^{a[2]^{\ldots a[n-1]}}}\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can express the substructure recurrence relations using a binary operator &lt;span class="math"&gt;\(\circ\)&lt;/span&gt;,
so that &lt;span class="math"&gt;\(f(b + c) = f(b) \circ f(c)\)&lt;/span&gt;.
&lt;span class="math"&gt;\(\circ\)&lt;/span&gt; is a function from &lt;span class="math"&gt;\(S \times S\)&lt;/span&gt; to &lt;span class="math"&gt;\(S\)&lt;/span&gt;, where &lt;span class="math"&gt;\(S\)&lt;/span&gt; is the output type of the query function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For SUMREPL, &lt;span class="math"&gt;\(x \circ y = x + y\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;For MINMAX, &lt;span class="math"&gt;\(x \circ y = (\min(x_0, y_0), \max(x_1, y_1))\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;For CHAROCC, &lt;span class="math"&gt;\(x \circ y\)&lt;/span&gt; is obtained by element-wise addition of arrays &lt;span class="math"&gt;\(x\)&lt;/span&gt; and &lt;span class="math"&gt;\(y\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="associativity"&gt;Associativity&lt;a class="headerlink" href="#associativity" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Depending on which prefix of &lt;span class="math"&gt;\(a\)&lt;/span&gt; we choose, there can be multiple ways of computing &lt;span class="math"&gt;\(f(a)\)&lt;/span&gt;.
For example, there are 2 ways of computing &lt;span class="math"&gt;\(f([x, y, z])\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;choosing &lt;span class="math"&gt;\([x]\)&lt;/span&gt; as prefix: &lt;span class="math"&gt;\(f([x, y, z]) = f([x]) \circ f([y, z])\)&lt;/span&gt; &lt;span class="math"&gt;\( = f([x]) \circ (f([y]) \circ f([z]))\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;choosing &lt;span class="math"&gt;\([x, y]\)&lt;/span&gt; as prefix: &lt;span class="math"&gt;\(f([x, y, z]) = f([x, y]) \circ f([z])\)&lt;/span&gt; &lt;span class="math"&gt;\( = (f([x]) \circ f([y])) \circ f([z])\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the output should not depend on the choice of prefix,
&lt;span class="math"&gt;\(\circ\)&lt;/span&gt; should be associative over the range of &lt;span class="math"&gt;\(f\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Since &lt;span class="math"&gt;\(\circ\)&lt;/span&gt; is associative, &lt;span class="math"&gt;\(f(a)\)&lt;/span&gt; &lt;span class="math"&gt;\(= f([a[0]]) \circ f([a[1]]) \circ \ldots \circ f([a[n-1]])\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="identity"&gt;Identity&lt;a class="headerlink" href="#identity" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let's define &lt;span class="math"&gt;\(e = f([\,])\)&lt;/span&gt;.
Since &lt;span class="math"&gt;\(f(a) = f(a + [\,]) = f(a) \circ e\)&lt;/span&gt; and &lt;span class="math"&gt;\(f(a) = f([\,] + a) = e \circ f(a)\)&lt;/span&gt;,
we call &lt;span class="math"&gt;\(e\)&lt;/span&gt; the 'identity element' of &lt;span class="math"&gt;\(S\)&lt;/span&gt; for &lt;span class="math"&gt;\(\circ\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(f\)&lt;/span&gt; may not be defined for an empty array (&lt;span class="math"&gt;\(f(a) = a[0]\)&lt;/span&gt; is an example).
When this happens, we can still define &lt;span class="math"&gt;\(f([\,]) = e\)&lt;/span&gt;.
&lt;span class="math"&gt;\(e\)&lt;/span&gt; need not have any real significance; it is just a symbol
(this is similar to how &lt;span class="math"&gt;\(\sqrt{-1} = i\)&lt;/span&gt;).
We also define &lt;span class="math"&gt;\(x \circ e = e \circ x = x\)&lt;/span&gt; for all &lt;span class="math"&gt;\(x \in S\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="monoids"&gt;Monoids&lt;a class="headerlink" href="#monoids" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A monoid &lt;span class="math"&gt;\(M = (S, \circ)\)&lt;/span&gt; is a set along with a binary operator defined on that set
which follows these axioms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Closure: &lt;span class="math"&gt;\(\forall x \in S, \forall y \in S,\)&lt;/span&gt;
&lt;span class="math"&gt;\(x \circ y \in S\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Associativity: &lt;span class="math"&gt;\(\forall x \in S, \forall y \in S, \forall z \in S,\)&lt;/span&gt;
&lt;span class="math"&gt;\((x \circ y) \circ z = x \circ (y \circ z)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Existence of identity: &lt;span class="math"&gt;\(\exists e \in S, \forall x \in S,\)&lt;/span&gt;
&lt;span class="math"&gt;\(e \circ x = x \circ e = x\)&lt;/span&gt;.
Here &lt;span class="math"&gt;\(e\)&lt;/span&gt; is called the identity of the monoid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can see that our query output type &lt;span class="math"&gt;\(S\)&lt;/span&gt; and our binary operator &lt;span class="math"&gt;\(\circ\)&lt;/span&gt; follow the above axioms.
Therefore, &lt;span class="math"&gt;\((S, \circ)\)&lt;/span&gt; is a monoid. We'll call it the 'query monoid'.&lt;/p&gt;
&lt;h3 id="monoid-elements-as-segment-tree-values"&gt;Monoid elements as segment tree values&lt;a class="headerlink" href="#monoid-elements-as-segment-tree-values" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every node &lt;span class="math"&gt;\(u\)&lt;/span&gt; of a segment tree represents a segment (contiguous subarray) of the input array.
For example, the root represents the whole array,
the root's children represent the left and right halves of the array,
and the leaves represent segments with only one element in them.
Let's denote &lt;span class="math"&gt;\(u\)&lt;/span&gt;'s segment by &lt;span class="math"&gt;\(\operatorname{segment}(u)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In every node &lt;span class="math"&gt;\(u\)&lt;/span&gt; of the segment tree, we will store the value &lt;span class="math"&gt;\(f(\operatorname{segment}(u))\)&lt;/span&gt;.
Let's denote this by &lt;span class="math"&gt;\(\operatorname{value}(u)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To build and query a generalized segment tree, we will need to specify the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(e\)&lt;/span&gt;: The identity element of the query monoid.
This is the output of empty queries.
For SUMREPL, &lt;span class="math"&gt;\(e = 0\)&lt;/span&gt;. For MINMAX, &lt;span class="math"&gt;\(e = (\infty, -\infty)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(f_0(x) = f([x])\)&lt;/span&gt;: Specification of how to apply &lt;span class="math"&gt;\(f\)&lt;/span&gt; to a single-element array.
This is used to create leaf nodes of the segment tree.
For SUMREPL, &lt;span class="math"&gt;\(f_0(x) = x\)&lt;/span&gt;. For MINMAX, &lt;span class="math"&gt;\(f_0(x) = (x, x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\circ\)&lt;/span&gt;: The binary operator.
This is used to create internal nodes of the segment tree.
For SUMREPL, &lt;span class="math"&gt;\(x \circ y = x + y\)&lt;/span&gt;.
For MINMAX, &lt;span class="math"&gt;\(x \circ y = \min(x_0, y_0), \max(x_1, y_1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-example"&gt;C++ example&lt;a class="headerlink" href="#c-example" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we write a generic segment tree library in C++,
we can make the query monoid type a template parameter.&lt;/p&gt;
&lt;p&gt;Here's an example of how to represent query monoid elements as a class
for the MINMAX problem:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinMaxElem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;infty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// identity element&lt;/span&gt;
        &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infty&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;infty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;explicit&lt;/span&gt; &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// element at leaf node&lt;/span&gt;
        &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// binary operator&lt;/span&gt;
        &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_x_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_x_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// direct constructor (will be used later, when coding update functions)&lt;/span&gt;
        &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_x_min&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x_max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_x_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the segment tree library, we can call the above methods
on the templated query monoid type without needing to know what they do.&lt;/p&gt;
&lt;h2 id="node-update-function"&gt;Node update function&lt;a class="headerlink" href="#node-update-function" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose I construct a segment tree on the input array &lt;span class="math"&gt;\(a\)&lt;/span&gt; of size &lt;span class="math"&gt;\(n\)&lt;/span&gt;
(where the query function is &lt;span class="math"&gt;\(f\)&lt;/span&gt; and the corresponding binary operator is &lt;span class="math"&gt;\(\circ\)&lt;/span&gt;).
Let the value at the root be &lt;span class="math"&gt;\(s\)&lt;/span&gt;. We know that &lt;span class="math"&gt;\(s = f(a)\)&lt;/span&gt;.
Now I apply a function &lt;span class="math"&gt;\(g\)&lt;/span&gt; to all elements of &lt;span class="math"&gt;\(a\)&lt;/span&gt;.
For notational convenience, let &lt;span class="math"&gt;\(g(a) = [g(a[0]), g(a[1]), \ldots, g(a[n-1])]\)&lt;/span&gt;.
After this, I update the segment tree and the value at the root is now &lt;span class="math"&gt;\(t\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Given &lt;span class="math"&gt;\(s\)&lt;/span&gt; and &lt;span class="math"&gt;\(g\)&lt;/span&gt;, can you find &lt;span class="math"&gt;\(t\)&lt;/span&gt;?
This question effectively means that you should be able to update a segment tree
node without looking at its descendants.
We're looking for a function &lt;span class="math"&gt;\(h\)&lt;/span&gt; where &lt;span class="math"&gt;\(h(f(b)) = f(g(b))\)&lt;/span&gt; for all arrays &lt;span class="math"&gt;\(b\)&lt;/span&gt;.
Let's call &lt;span class="math"&gt;\(h\)&lt;/span&gt; a 'node update function'.&lt;/p&gt;
&lt;p&gt;There's no straightforward algorithm for deriving &lt;span class="math"&gt;\(h\)&lt;/span&gt; from &lt;span class="math"&gt;\(g\)&lt;/span&gt;, but it's usually easy.
For example, for the MINMAX problem with &lt;span class="math"&gt;\(g(x) = x + 20\)&lt;/span&gt;, &lt;span class="math"&gt;\(h(x) = (x_0 + 20, x_1 + 20)\)&lt;/span&gt;.
This is how we verify &lt;span class="math"&gt;\(h\)&lt;/span&gt;:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
&amp;amp; h(f(a))
\\ &amp;amp;= h((\min(a), \max(a)))
\\ &amp;amp;= (\min(a) + 20, \max(a) + 20)
\\ &amp;amp;= (\min(a + 20), \max(a + 20))
\\ &amp;amp;= (\min(g(a)), \max(g(a)))
\\ &amp;amp;= f(g(a))
\end{align*}&lt;/div&gt;
&lt;p&gt;Here &lt;span class="math"&gt;\(a + 20\)&lt;/span&gt; is the array obtained by adding 20 to every element of &lt;span class="math"&gt;\(a\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It can be proven that every node update function is an endomorphism (a
&lt;a href="https://en.wikipedia.org/wiki/Monoid#Monoid_homomorphisms"&gt;homomorphism&lt;/a&gt;
whose domain and codomain are the same).
I'm omitting the proof here for brevity.&lt;/p&gt;
&lt;h2 id="lazy-propagation"&gt;Lazy propagation&lt;a class="headerlink" href="#lazy-propagation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In computer science, laziness means procrastination.&lt;/p&gt;
&lt;p&gt;When we're told to execute an update on a segment tree, we don't actually do the whole update.
We just note down which subtrees need to be updated.
Then when we're supposed to answer a query, we update only the part of the segment tree
which is needed to answer the query.&lt;/p&gt;
&lt;p&gt;I'll explain this with an example for MINMAX
with the initial array &lt;span class="math"&gt;\([10, 20, 30, 40, 50, 60, 70]\)&lt;/span&gt;.
The image below shows the initial segment tree.
It presents 2 attributes of every segment tree node &lt;span class="math"&gt;\(u\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the indexes of the first and last elements of &lt;span class="math"&gt;\(\operatorname{segment}(u)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\operatorname{value}(u)\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/segtree-lazy-update/0.dot.svg" /&gt;
&lt;figcaption&gt;Initial segment tree&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="updation"&gt;Updation&lt;a class="headerlink" href="#updation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now we get an update with &lt;span class="math"&gt;\(l=2, r=6, g(x) = x + 20\)&lt;/span&gt;.
This corresponds to &lt;span class="math"&gt;\(h(x) = (x_0 + 20, x_1 + 20)\)&lt;/span&gt;.
Define &lt;span class="math"&gt;\(d(a, b)(x) = (ax_0 + b, ax_1 + b)\)&lt;/span&gt;.
Therefore, &lt;span class="math"&gt;\(h = d(1, 20)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To execute this update, we first find the maximal subtrees which span this range.
These are the subtrees at &lt;code&gt;2..3&lt;/code&gt; and &lt;code&gt;4..6&lt;/code&gt;.
We'll update the values at &lt;code&gt;2..3&lt;/code&gt; and &lt;code&gt;4..6&lt;/code&gt; by applying &lt;span class="math"&gt;\(h\)&lt;/span&gt; to their values.
We'll then note down that their children are yet to be updated with &lt;span class="math"&gt;\(h = d(1, 20)\)&lt;/span&gt;.
We'll also update all the ancestors of the affected nodes by recomputing their values.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/segtree-lazy-update/1.dot.svg" /&gt;
&lt;figcaption&gt;
Segment tree after update
&lt;span class="math"&gt;\(l=2, r=6, g(x) = x + 20\)&lt;/span&gt;.&lt;br /&gt;
Blue nodes were updated. Red nodes were not updated but they have a pending update.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="querying"&gt;Querying&lt;a class="headerlink" href="#querying" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If a query arrives for &lt;span class="math"&gt;\(l=2, r=5\)&lt;/span&gt;, we would like to return
&lt;span class="math"&gt;\(\operatorname{value}(\texttt{2..3}) \circ \operatorname{value}(\texttt{4..5})\)&lt;/span&gt;.
But before that, we'll have to update &lt;span class="math"&gt;\(\operatorname{value}(\texttt{4..5})\)&lt;/span&gt;.
To do this, we apply &lt;span class="math"&gt;\(h\)&lt;/span&gt; to &lt;span class="math"&gt;\(\operatorname{value}(\texttt{4..5})\)&lt;/span&gt;
and mark its children as pending for updation.
Since the pending update moved from &lt;code&gt;4..5&lt;/code&gt; to its child,
we say that the pending update 'propagated'.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/segtree-lazy-update/2.dot.svg" /&gt;
&lt;figcaption&gt;
Segment tree after the query &lt;span class="math"&gt;\(l=2, r=5\)&lt;/span&gt;.&lt;br /&gt;
The value returned by the query is written beside each node.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="combining-updates"&gt;Combining updates&lt;a class="headerlink" href="#combining-updates" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Suppose we get the update &lt;span class="math"&gt;\(l=0, r=6, g(x) = x + 10\)&lt;/span&gt;.
We will update the root node and add &lt;span class="math"&gt;\(d(1, 10)\)&lt;/span&gt; to the children.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/segtree-lazy-update/3.dot.svg" /&gt;
&lt;figcaption&gt;
Segment tree after update
&lt;span class="math"&gt;\(l=0, r=6, g(x) = x + 10\)&lt;/span&gt;.&lt;br /&gt;
Blue nodes were updated. Red nodes were not updated but they have a pending update.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now we get another update &lt;span class="math"&gt;\(l=0, r=6, g(x) = 3x\)&lt;/span&gt;. This corresponds to &lt;span class="math"&gt;\(h = d(3, 0)\)&lt;/span&gt;.
We can update the root node, and add &lt;span class="math"&gt;\(d(3, 0)\)&lt;/span&gt; to the children.
But the children already have a pending update of &lt;span class="math"&gt;\(d(1, 10)\)&lt;/span&gt;.
To resolve this, we will compose the functions, i.e. we'll find a single
function which is equal to successively applying &lt;span class="math"&gt;\(d(1, 10)\)&lt;/span&gt; and then &lt;span class="math"&gt;\(d(3, 0)\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
&amp;amp; d(3, 0)(d(1, 10)(x))
\\ &amp;amp;= d(3, 0)(x + 10)
\\ &amp;amp;= 3(x + 10) = 3x + 30
\\ &amp;amp;= d(3, 30)(x)
\end{align*}&lt;/div&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/segtree-lazy-update/4.dot.svg" /&gt;
&lt;figcaption&gt;
Segment tree after update
&lt;span class="math"&gt;\(l=0, r=6, g(x) = 3x\)&lt;/span&gt;.&lt;br /&gt;
Blue nodes were updated. Red nodes were not updated but they have a pending update.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;More generally, &lt;span class="math"&gt;\(d(a_1, b_1) \cdot d(a_2, b_2) = d(a_1a_2, a_1b_2 + b_1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="node-update-function-family"&gt;Node update function family&lt;a class="headerlink" href="#node-update-function-family" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the above example for lazy propagation,
&lt;span class="math"&gt;\(D = \{d(a, b): (a, b) \in \mathbb{Z}^2\}\)&lt;/span&gt; is a 'function family'.
It represents the set of all possible node update functions for MINMAX.&lt;/p&gt;
&lt;p&gt;For any segment tree problem, you'll have to come up with a function family for node update functions.
Additionally, this function family will need to be closed under function composition.
This means that if &lt;span class="math"&gt;\(h_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(h_2\)&lt;/span&gt; are members of this family,
then &lt;span class="math"&gt;\(h_1 \cdot h_2\)&lt;/span&gt; should also be a member of this family.&lt;/p&gt;
&lt;p&gt;This family should also include the identity function.
The identity function is the function &lt;span class="math"&gt;\(h(x) = x\)&lt;/span&gt;.
In the above example for lazy propagation, &lt;span class="math"&gt;\(d(1, 0)\)&lt;/span&gt; is the identity.&lt;/p&gt;
&lt;p&gt;(In fact, the function family forms a monoid over function composition,
since function composition is always associative.)&lt;/p&gt;
&lt;h3 id="representing-the-family"&gt;Representing the family&lt;a class="headerlink" href="#representing-the-family" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To represent a node update function family, we'll need to specify:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Function representation:
We must be able to represent every function in the family uniquely.
In the above example, &lt;span class="math"&gt;\(d(a, b)\)&lt;/span&gt; can be represented by the ordered pair &lt;span class="math"&gt;\((a, b)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function definition:
For every function in the family, we must know how to apply it to the input.
In the above example, &lt;span class="math"&gt;\(d(a, b)(x) = (ax_0 + b, ax_1 + b)\)&lt;/span&gt; is the definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The identity function: The function &lt;span class="math"&gt;\(h(x) = x\)&lt;/span&gt;.
In the above example, &lt;span class="math"&gt;\(d(1, 0)\)&lt;/span&gt; is the identity function.
It should also be possible to check whether a function is the identity function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function composition: A rule for how to compose 2 functions.
In the above example, the composition of &lt;span class="math"&gt;\((a_1, b_1)\)&lt;/span&gt; and &lt;span class="math"&gt;\((a_2, b_2)\)&lt;/span&gt; is &lt;span class="math"&gt;\((a_1a_2, a_1b_2 + b_1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-example_1"&gt;C++ example&lt;a class="headerlink" href="#c-example_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we write a generic segment tree library in C++,
we can make the node update function family a template parameter.&lt;/p&gt;
&lt;p&gt;Here's an example of how to represent node update functions as a class
for the MINMAX problem:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinearUpdFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// function representation&lt;/span&gt;

    &lt;span class="n"&gt;MinMaxElem&lt;/span&gt; &lt;span class="nf"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// function definition&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MinMaxElem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_min&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_max&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;LinearUpdFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// identity function&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;is_identity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;LinearUpdFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;LinearUpdFunc&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;LinearUpdFunc&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// function composition&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the segment tree library, we can call the above methods
on the templated function family type without needing to know what they do.&lt;/p&gt;
&lt;h2 id="generic-segment-tree-implementation"&gt;Generic segment tree implementation&lt;a class="headerlink" href="#generic-segment-tree-implementation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will use 2 arrays: &lt;code&gt;values&lt;/code&gt; and &lt;code&gt;pending&lt;/code&gt;.
&lt;code&gt;values[i]&lt;/code&gt; is the value of the &lt;span class="math"&gt;\(i^{\textrm{th}}\)&lt;/span&gt; node of the segment tree.
&lt;code&gt;pending[i]&lt;/code&gt; is the pending node update function of the &lt;span class="math"&gt;\(i^{\textrm{th}}\)&lt;/span&gt; node.
Initially, &lt;code&gt;values&lt;/code&gt; is constructed from the input array
and &lt;code&gt;pending[i]&lt;/code&gt; is the identity function for every node &lt;span class="math"&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;You can see &lt;a href="https://gist.github.com/sharmaeklavya2/99ed35efbb639bbe7d7b46b89b74fea0"&gt;my C++ segment tree library&lt;/a&gt;
for an example of how to write generic segment trees.&lt;/p&gt;
&lt;h2 id="bringing-problems-to-standard-form"&gt;Bringing problems to standard form&lt;a class="headerlink" href="#bringing-problems-to-standard-form" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To use the generic segment tree implementation,
we should be able to come up with a suitable query monoid
and a suitable node update function family.
Let's look at some examples:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SUMREPL&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(f(a) = \left(n, \sum_{i=1}^n a[i]\right)\)&lt;/span&gt;, where &lt;span class="math"&gt;\(a\)&lt;/span&gt; is an array of size &lt;span class="math"&gt;\(n\)&lt;/span&gt;.
Therefore, identity is &lt;span class="math"&gt;\((0, 0)\)&lt;/span&gt;, &lt;span class="math"&gt;\(f_0(x) = (1, x)\)&lt;/span&gt;
and &lt;span class="math"&gt;\((n_1, x) \circ (n_2, y) = (n_1 + n_2, x + y)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;For the update function &lt;span class="math"&gt;\(g(x) = y\)&lt;/span&gt;, the node update function is &lt;span class="math"&gt;\(h_y((n, x)) = (n, ny)\)&lt;/span&gt;.
The identity function is &lt;span class="math"&gt;\(id\)&lt;/span&gt;, which cannot be expressed as &lt;span class="math"&gt;\(h_y\)&lt;/span&gt; for any &lt;span class="math"&gt;\(y\)&lt;/span&gt;.
Function composition: &lt;span class="math"&gt;\(h_s \cdot h_t = h_s\)&lt;/span&gt; and &lt;span class="math"&gt;\(h_s \cdot id = id \cdot h_s = h_s\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CHAROCC&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each node of the segment tree stores the frequency of every lowercase English letter.
Identity element is an array with all zeros.
Creating a leaf node from a string involves computing frequencies of each character.
The binary operator &lt;span class="math"&gt;\(\circ\)&lt;/span&gt; is defined as element-wise addition of the arrays.&lt;/li&gt;
&lt;li&gt;A node update function is represented as an array &lt;span class="math"&gt;\(b\)&lt;/span&gt; of length 26.
Applying the function involves elementwise addition of &lt;span class="math"&gt;\(b\)&lt;/span&gt; to a segment tree node value.
Functions are composed by adding their arrays element-wise.
The identity function has all elements 0.
The update function with character &lt;span class="math"&gt;\(c\)&lt;/span&gt; corresponds to an array
where the entry of &lt;span class="math"&gt;\(c\)&lt;/span&gt; is 1 and all other entries are 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;KADANE&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;You are given an array &lt;span class="math"&gt;\(a\)&lt;/span&gt; of &lt;span class="math"&gt;\(n\)&lt;/span&gt; integers, indexed from 0 to &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;.
The query function &lt;span class="math"&gt;\(f\)&lt;/span&gt; is the largest contiguous subarray sum
(i.e., find a contiguous subarray of the input such that
the sum of the numbers in the subarray is maximum,
and then return that maximum sum).
You will be asked to perform &lt;span class="math"&gt;\(q\)&lt;/span&gt; operations. Each operation will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given integers &lt;span class="math"&gt;\(l\)&lt;/span&gt; and &lt;span class="math"&gt;\(r\)&lt;/span&gt;, output &lt;span class="math"&gt;\(f(a[l..r])\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;given integers &lt;span class="math"&gt;\(l\)&lt;/span&gt;, &lt;span class="math"&gt;\(r\)&lt;/span&gt; and &lt;span class="math"&gt;\(y\)&lt;/span&gt;, replace &lt;span class="math"&gt;\(a[i]\)&lt;/span&gt; by &lt;span class="math"&gt;\(y\)&lt;/span&gt; for all &lt;span class="math"&gt;\(l \le i \le r\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem of coming up with a suitable monoid and
a suitable node update function family is left as an exercise.&lt;/p&gt;
&lt;div class="collapsible"&gt;
    &lt;label for="checkbox0" class="collapsor-lbl"&gt; Minor hint &lt;/label&gt;
    &lt;div class="focus-capturer" tabindex="0"&gt;
        &lt;input id="checkbox0" class="collapsor" type="checkbox" /&gt;
        &lt;div class="collapsible-content"&gt;
            &lt;p&gt;See the proof of correctness of Kadane's algorithm.
            Use divide-and-conquer instead of an incremental approach.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="collapsible"&gt;
    &lt;label for="checkbox1" class="collapsor-lbl"&gt; Major hint &lt;/label&gt;
    &lt;div class="focus-capturer" tabindex="0"&gt;
        &lt;input id="checkbox1" class="collapsor" type="checkbox" /&gt;
        &lt;div class="collapsible-content"&gt;
            &lt;p&gt;Each segment tree node stores 4 values for its segment:&lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Sum of the elements of the segment&lt;/li&gt;
                &lt;li&gt;Largest prefix sum of the segment&lt;/li&gt;
                &lt;li&gt;Largest suffix sum of the segment&lt;/li&gt;
                &lt;li&gt;Largest subarray sum of the segment&lt;/li&gt;
            &lt;/ol&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</content><category term="CS"></category><category term="Algorithms"></category><category term="Math"></category></entry><entry><title>A Comprehensive Guide to Customizing your MacBook</title><link href="https://sharmaeklavya2.github.io/blog/customize-macos.html" rel="alternate"></link><published>2019-07-12T00:00:00+05:30</published><updated>2019-07-12T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2019-07-12:/blog/customize-macos.html</id><summary type="html">&lt;p&gt;This post contains a list of all the things I did to customize my MacBook. Most instructions here are useful only for programmers and power users.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently got a new laptop - a MacBook Air!
I customized it so that it's easy for me to use.
Major changes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moving data from my old laptop to my new laptop.&lt;/li&gt;
&lt;li&gt;Installing and configuring software for basic necessities, programming and writing content.&lt;/li&gt;
&lt;li&gt;Setting up a nice environment on my &lt;a href="https://en.wikipedia.org/wiki/Terminal_emulator"&gt;terminal&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I made all these changes to my new laptop, I noted down the steps that I took for future reference.
I think this could be useful to others', so here I am, writing a blog post on it.&lt;/p&gt;
&lt;p&gt;This post is written for macOS Mojave.
You may have to modify some instructions if you're using a newer macOS.
If you're not using macOS, you can still get a similar working environment on Linux,
but you'll have to make major modifications to the instructions below.&lt;/p&gt;
&lt;p&gt;You can also refer to this &lt;a href="https://sharmaeklavya2.github.io/blog/img/macos-customize-graph.dot.svg"&gt;dependency graph&lt;/a&gt;
(&lt;a href="https://sharmaeklavya2.github.io/blog/img/macos-customize-graph.dot"&gt;source code&lt;/a&gt;).&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#basic-setup"&gt;Basic setup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#system-preferences"&gt;System Preferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finder-preferences"&gt;Finder preferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-google-chrome-and-sync-profile"&gt;Install Google Chrome and sync profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#textedit-preferences"&gt;TextEdit preferences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminal-and-shell"&gt;&lt;span style="background-color: #F9E79F"/&gt;Terminal and Shell&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#terminalapp-preferences"&gt;Terminal.app preferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-xcode-command-line-tools"&gt;Installing Xcode command-line tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dotfiles"&gt;Dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-homebrew"&gt;Install Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-tmux"&gt;Install tmux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-command-line-programs"&gt;&lt;span style="background-color: #A9DFBF"&gt;Install command-line programs&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mactex"&gt;MacTex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-and-packages"&gt;Python and packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#transfer-backed-up-data"&gt;&lt;span style="background-color: #AED6F1"&gt;Transfer backed-up data&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#reorganizing-data-and-backup"&gt;Reorganizing data and backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ntfs-drivers-for-macos"&gt;NTFS drivers for macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-dropbox-and-use-symlinks"&gt;Install Dropbox and use symlinks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wallpapers-and-profile-picture"&gt;Wallpapers and profile picture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#customize-vim"&gt;&lt;span style="background-color: #F5B7B1"&gt;Customize Vim&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-newer-vim"&gt;Install newer Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-pathogen"&gt;Install Pathogen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-vim-plugins"&gt;Get Vim plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-youcompleteme"&gt;Install YouCompleteMe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fix-vim-locale-error"&gt;Fix Vim locale error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-nginx-and-serve-website-mirrors"&gt;&lt;span style="background-color: #D2B4DE"&gt;Install Nginx and serve website mirrors&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-and-run-nginx"&gt;Install and run Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enable-nginx-autoindex"&gt;Enable nginx autoindex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-my-websites-with-nginx"&gt;Serve my websites with Nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="basic-setup"&gt;Basic setup&lt;a class="headerlink" href="#basic-setup" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Connect to a WiFi network&lt;/strong&gt;, since we'll be downloading a lot of stuff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update your OS&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;macOS will offer a &lt;strong&gt;tour of the OS&lt;/strong&gt;. Take that if you're new to macOS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove useless apps from dock&lt;/strong&gt;: right-click on the app in the dock, go to Options and uncheck 'Keep in Dock'.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="system-preferences"&gt;System Preferences&lt;a class="headerlink" href="#system-preferences" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Click the Apple logo in the top-left corner of your screen and choose 'System Preferences'.
Here you can customize most aspects of your operating system.
If you have the time, go through each of the items and choose the options which make sense to you.
These are the changes which I made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General: Use dark theme (Appearance: Dark).&lt;/li&gt;
&lt;li&gt;Dock:&lt;ul&gt;
&lt;li&gt;Position on screen: Left.&lt;/li&gt;
&lt;li&gt;Uncheck 'Show recent applications in Dock'.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language and Region: Select 'English (US)' as the primary language.
  I live in India, so the default was 'English (India)',
  but I changed it because I generally follow US spelling.
  I don't want my spell-checker to highlight 'color' and 'center' as misspelled words.&lt;/li&gt;
&lt;li&gt;Keyboard: Input Sources: Hide input menu in menu bar.&lt;/li&gt;
&lt;li&gt;Display: Choose Resolution as Scaled and choose the large size.&lt;/li&gt;
&lt;li&gt;Bluetooth: Show Bluetooth in menu bar.&lt;/li&gt;
&lt;li&gt;Sharing:&lt;ul&gt;
&lt;li&gt;Change hostname. The hostname shows up in the terminal prompt, so I want it to be short.&lt;/li&gt;
&lt;li&gt;Allow remote login via SSH.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Siri: Disable Siri. I rarely use it.&lt;/li&gt;
&lt;li&gt;Date and Time: In the 'Clock' tab, check 'Display time with seconds' and 'show date'.&lt;/li&gt;
&lt;li&gt;Accessibility: Siri: 'Enable type to Siri' if you don't want to disable Siri
  but want to talk to it by typing instead of speaking.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="finder-preferences"&gt;Finder preferences&lt;a class="headerlink" href="#finder-preferences" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finder is the file manager in macOS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finder preferences (&lt;code&gt;Cmd + ,&lt;/code&gt;):&lt;ul&gt;
&lt;li&gt;General: Show hard disk and connected servers on desktop.&lt;/li&gt;
&lt;li&gt;Sidebar: Select useful locations.&lt;/li&gt;
&lt;li&gt;Advanced:&lt;ul&gt;
&lt;li&gt;Show all filename extensions.&lt;/li&gt;
&lt;li&gt;Keep folders on top in windows.&lt;/li&gt;
&lt;li&gt;Search current folder when performing a search.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to 'View' in Finder's menu bar:&lt;ul&gt;
&lt;li&gt;Show view options (&lt;code&gt;Cmd + J&lt;/code&gt;): 'Sort by Name' and 'Use as Defaults'.&lt;/li&gt;
&lt;li&gt;Show path bar.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Cmd + Shift + .&lt;/code&gt; to enable viewing hidden files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="install-google-chrome-and-sync-profile"&gt;Install Google Chrome and sync profile&lt;a class="headerlink" href="#install-google-chrome-and-sync-profile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I prefer Google Chrome over Safari.
I made Chrome the default browser.
I also synced my account to get all my bookmarks and extensions.&lt;/p&gt;
&lt;h3 id="textedit-preferences"&gt;TextEdit preferences&lt;a class="headerlink" href="#textedit-preferences" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TextEdit is the default plain-text and rich-text editor bundled with macOS.&lt;/p&gt;
&lt;p&gt;I usually use &lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)"&gt;Vim&lt;/a&gt; for text editing.
Vim is far superior to TextEdit in terms of advanced functionality,
like customizability, syntax highlighting, find-and-replace, etc.
But having a lightweight GUI text editor can be handy.&lt;/p&gt;
&lt;p&gt;TextEdit preferences (&lt;code&gt;Cmd + ,&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Format: plain text. This is needed to prevent new instances of TextEdit from opening a rich-text editor.&lt;/li&gt;
&lt;li&gt;Font: Menlo, size 16.&lt;/li&gt;
&lt;li&gt;Disable 'Correct spelling automatically'.&lt;/li&gt;
&lt;li&gt;Display HTML files as HTML code.&lt;/li&gt;
&lt;li&gt;Disable 'add .txt extension to plain text files'. This is needed if you have to edit extensionless files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="terminal-and-shell"&gt;&lt;span style="background-color: #F9E79F"/&gt;Terminal and Shell&lt;/span&gt;&lt;a class="headerlink" href="#terminal-and-shell" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you're an aspiring programmer or power user, you should get to know the command-line.
For this blog post, I'm going to assume that you know how to run commands from the shell and
you know the meaning of the following words:
terminal emulator, shell, prompt, home directory, current working directory.
In case you don't, here's a nice short tutorial by TreeHouse:
&lt;a href="https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line"&gt;Introduction to the Mac OS X Command Line&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="terminalapp-preferences"&gt;Terminal.app preferences&lt;a class="headerlink" href="#terminalapp-preferences" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Terminal.app is the default terminal emulator on macOS.
There are better alternatives, like &lt;a href="https://www.iterm2.com/features.html"&gt;iTerm2&lt;/a&gt;,
but Terminal.app is good enough for me, so I didn't bother installing iTerm2.&lt;/p&gt;
&lt;h4&gt;Creating a new profile with the Solarized color scheme&lt;/h4&gt;
&lt;p&gt;Terminal.app has multiple profiles available.
Each profile specifies the color scheme, font face, font size and many other settings.
Instead of making changes to the default profile,
we're going to create a new profile with our changes.&lt;/p&gt;
&lt;p&gt;I use the &lt;a href="https://ethanschoonover.com/solarized/"&gt;Solarized&lt;/a&gt; color scheme for my terminal because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is an eye-pleasing color scheme. It works well with Vim's syntax highlighting.&lt;/li&gt;
&lt;li&gt;Solarized is a popular color scheme, so it's available on many terminal emulators, text editors, IDEs, etc.
This helps me get a unified look-and-feel when switching programs or platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even though Solarized isn't available out-of-the-box for Terminal.app,
the advantages above outweigh the effort required to set it up on the terminal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;a href="https://raw.githubusercontent.com/tomislav/osx-terminal.app-colors-solarized/master/Solarized%20Dark.terminal"&gt;Solarized dark theme for Terminal.app&lt;/a&gt;. Open it in finder and double-click on it.&lt;/li&gt;
&lt;li&gt;macOS will say that the file cannot be opened because it is not from an identified developer.
Go to 'System Preferences &amp;gt; Security &amp;gt; General' and press 'Open Anyway' (don't worry; it's not an executable).&lt;/li&gt;
&lt;li&gt;Open terminal, 'Preferences &amp;gt; Profiles', select 'Solarized Dark' and press the 'Default' button.
Now restart Terminal.app and you'll see the dark blue background of the Solarized color scheme.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Other preferences&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In the 'Preferences &amp;gt; Profile &amp;gt; Text' tab, set opacity to 85% and font size to 16.&lt;/li&gt;
&lt;li&gt;In the 'Preferences &amp;gt; Profile &amp;gt; Window' tab, deselect 'restore text when reopening windows'.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="installing-xcode-command-line-tools"&gt;Installing &lt;a href="http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/"&gt;Xcode command-line tools&lt;/a&gt;&lt;a class="headerlink" href="#installing-xcode-command-line-tools" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The 'Xcode command-line tools' consist of command-line applications that are
very common in Unix-like environments, like git, gcc, make, perl.&lt;/p&gt;
&lt;p&gt;Run 'xcode-select --install' from a terminal.
A dialog box will pop up. Select install.
You should probably connect to a power source before doing this
because macOS is going to suggest you do so.&lt;/p&gt;
&lt;h3 id="dotfiles"&gt;Dotfiles&lt;a class="headerlink" href="#dotfiles" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dotfiles colloquially refers to configuration files placed in the home directory.
These files' names start with a dot (&lt;code&gt;.&lt;/code&gt;).
Common examples are &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.gitconfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have put all my dotfiles in a Github repository at
&lt;a href="https://github.com/sharmaeklavya2/dotfiles"&gt;&lt;code&gt;sharmaeklavya2/dotfiles&lt;/code&gt;&lt;/a&gt;.
You can find detailed instructions for setting them up in the repository's readme.
Here is a brief version:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git clone https://github.com/sharmaeklavya2/dotfiles.git
cd dotfiles
./scripts/make_links.py
shopt -s dotglob nullglob
mv _links/.bashrc _links/.bash_profile
mv _links/* ~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now either restart your terminal or run &lt;code&gt;source ~/.bash_profile&lt;/code&gt;.
If you executed the above instructions correctly,
the first thing you'll notice is the improved, colorful prompt.&lt;/p&gt;
&lt;p&gt;My dotfiles are written with the Solarized terminal color scheme in mind.
If you're not using Solarized, you may want to modify or omit using &lt;code&gt;.dircolors&lt;/code&gt; and &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also recommend using the &lt;code&gt;git-prompt.sh&lt;/code&gt; utility script, which will display useful information
about git repositories (like branch, dirty status, etc) in your prompt.
To do this, download &lt;a href="https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh"&gt;git-prompt.sh&lt;/a&gt;
to &lt;code&gt;~/ext_bin/git-prompt.sh&lt;/code&gt;. The &lt;code&gt;~/.bash_profile&lt;/code&gt; will use it to modify the prompt.&lt;/p&gt;
&lt;p&gt;I also recommend adding the line &lt;code&gt;export HISTSIZE=100000&lt;/code&gt; to either &lt;code&gt;~/.env&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt;
to increase your shell input history size.&lt;/p&gt;
&lt;h3 id="install-homebrew"&gt;Install &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;a class="headerlink" href="#install-homebrew" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Homebrew (a.k.a. brew) is a package manager, which means it's like a terminal version of the App Store.
You can install programs (called packages by brew) by simply writing commands on the terminal:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;brew install name-of-package
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;According to &lt;a href="https://brew.sh/"&gt;brew's website&lt;/a&gt;, brew can be installed by typing this into the terminal:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installation may require superuser permissions.&lt;/p&gt;
&lt;h3 id="install-tmux"&gt;Install &lt;a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/"&gt;tmux&lt;/a&gt;&lt;a class="headerlink" href="#install-tmux" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I usually need multiple shells to be open.
I can use Terminal.app's 'tabs' (&lt;code&gt;Cmd + T&lt;/code&gt;) to achieve this.
But I use tmux instead since it has more features.
Also, if you SSH to a server that has tmux installed,
you can open multiple shells on the server on a single SSH session.&lt;/p&gt;
&lt;p&gt;To install, run &lt;code&gt;brew install tmux&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Brew will check for updates every time you run it.
To prevent that from happening, add &lt;code&gt;export HOMEBREW_NO_AUTO_UPDATE=1&lt;/code&gt;
to &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.env&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="install-command-line-programs"&gt;&lt;span style="background-color: #A9DFBF"&gt;Install command-line programs&lt;/span&gt;&lt;a class="headerlink" href="#install-command-line-programs" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="java"&gt;Java&lt;a class="headerlink" href="#java" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;brew install java
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="mactex"&gt;MacTex&lt;a class="headerlink" href="#mactex" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MacTex is a suite of programs for typesetting documents using TeX and LaTeX.
LaTeX is a great system for writing professional-looking mathematical documents.&lt;/p&gt;
&lt;p&gt;You can install MacTex using a GUI installer, but I did it using &lt;code&gt;brew install mactex&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="python-and-packages"&gt;Python and packages&lt;a class="headerlink" href="#python-and-packages" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS has Python 2 pre-installed, but we should use Python 3, since
&lt;a href="https://www.anaconda.com/end-of-life-eol-for-python-2-7-is-coming-are-you-ready/"&gt;Python 2 will reach EOL&lt;/a&gt;
on Jan 1, 2020.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;brew install python3&lt;/code&gt;. That will install &lt;code&gt;python3&lt;/code&gt; and &lt;a href="https://pip.pypa.io/en/stable/"&gt;&lt;code&gt;pip3&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;python virtual environments&lt;/a&gt;.
I use one big virtualenv where I install all commonly used packages,
and I create application-specific virtualenvs for large applications that I'm developing.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;pip3 install virtualenv&lt;/code&gt; to install the &lt;code&gt;virtualenv&lt;/code&gt; tool.
Run &lt;code&gt;virtualenv /path/to/venv/ -p python3&lt;/code&gt; to create a python3 virtualenv.&lt;/p&gt;
&lt;p&gt;Activate the virtualenv using &lt;code&gt;source /path/to/venv/bin/activate&lt;/code&gt;.
Now all python commands and applications you run will use this virtualenv.&lt;/p&gt;
&lt;p&gt;I usually install python packages only when required,
but some are useful enough that I installed them in the beginning:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;pip install ipython requests pipdeptree flake8 grip cleaver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These packages are useful for number-crunching and analytics:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;pip install numpy scipy pandas matplotlib seaborn
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="transfer-backed-up-data"&gt;&lt;span style="background-color: #AED6F1"&gt;Transfer backed-up data&lt;/span&gt;&lt;a class="headerlink" href="#transfer-backed-up-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="reorganizing-data-and-backup"&gt;Reorganizing data and backup&lt;a class="headerlink" href="#reorganizing-data-and-backup" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are many places where I store my files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My laptop's SSD (which is small enough for all my files to not fit on it).&lt;/li&gt;
&lt;li&gt;My external hard drive.&lt;/li&gt;
&lt;li&gt;My &lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt; account.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sharmaeklavya2"&gt;My Github repositories&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My Android phone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of my files are stored on more than one of the above locations.
Sometimes the files on one storage medium get updated but not others.
This made it very difficult for me to manage them without the risk of accidentally losing some files.&lt;/p&gt;
&lt;p&gt;To mitigate this problem, I did a massive reorganization of my files before moving them to my new laptop.
I organized them into folders based on the kind of content and access patterns
and demarcated which folders will be on which storage mediums.&lt;/p&gt;
&lt;p&gt;I moved my frequently-changing content to Dropbox.
I use the Dropbox desktop app which syncs my files online in real-time.
On my external hard drive, I have an up-to-date backup of content that rarely changes.&lt;/p&gt;
&lt;p&gt;If you use git for your code, make sure push all unpushed code to an online remote like Github or Bitbucket.&lt;/p&gt;
&lt;h3 id="ntfs-drivers-for-macos"&gt;NTFS drivers for macOS&lt;a class="headerlink" href="#ntfs-drivers-for-macos" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My external hard drive is NTFS-formatted, but macOS cannot write to NTFS drives; it can only read from them.
This was problematic when I was transferring my files from my old laptop (which was also a MacBook)
to my external hard drive. There are 3 options available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Somehow reformat the external drive to FAT32 without losing data.&lt;/li&gt;
&lt;li&gt;Install an open-source NTFS driver.
It's hard to make them work and you have to mount/unmount via command-line.&lt;/li&gt;
&lt;li&gt;Install a paid NTFS driver, like &lt;a href="https://www.paragon-software.com/home/ntfs-mac/"&gt;Paragon&lt;/a&gt;.
These work seamlessly, but are either expensive or offer a limited-time trial version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, my external hard drive was a Seagate product.
Seagate offers a &lt;a href="https://www.seagate.com/in/en/support/downloads/item/ntfs-driver-for-mac-os-master-dl/"&gt;free-of-charge version of Paragon's NTFS driver&lt;/a&gt;
which only works on Seagate drives.&lt;/p&gt;
&lt;h3 id="install-dropbox-and-use-symlinks"&gt;Install Dropbox and use symlinks&lt;a class="headerlink" href="#install-dropbox-and-use-symlinks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I installed &lt;a href="https://www.dropbox.com/install"&gt;Dropbox's desktop app&lt;/a&gt; on my new laptop.
This app creates a directory at &lt;code&gt;~/Dropbox&lt;/code&gt; and downloads all your online content into it.
Anything you put in this directory will get synced to your online account.&lt;/p&gt;
&lt;p&gt;Dropbox has the limitation that it will only sync files inside &lt;code&gt;~/Dropbox&lt;/code&gt;.
If I ever change my mind about what to sync, I'll have to move things in and out of &lt;code&gt;~/Dropbox&lt;/code&gt;.
If you're a command-line user, you'll know how annoying it can be to change frequently-used paths.&lt;/p&gt;
&lt;p&gt;To solve this problem, I placed all my files outside &lt;code&gt;~/Dropbox&lt;/code&gt;
and created &lt;a href="https://kb.iu.edu/d/abbe"&gt;symlinks&lt;/a&gt; to them which I placed in &lt;code&gt;~/Dropbox&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="wallpapers-and-profile-picture"&gt;Wallpapers and profile picture&lt;a class="headerlink" href="#wallpapers-and-profile-picture" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After transferring files from my external hard drive to my new laptop,
I configured macOS to use my custom wallpapers instead of the system-default ones
and use my profile picture on the lock screen.&lt;/p&gt;
&lt;h2 id="customize-vim"&gt;&lt;span style="background-color: #F5B7B1"&gt;Customize Vim&lt;/span&gt;&lt;a class="headerlink" href="#customize-vim" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="install-newer-vim"&gt;Install newer Vim&lt;a class="headerlink" href="#install-newer-vim" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Although macOS comes with &lt;code&gt;vim&lt;/code&gt; pre-installed, that version of Vim was compiled without some important features.
You can see which features are installed by running &lt;code&gt;vim --version&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;brew install vim&lt;/code&gt; to install a newer, better Vim.
Alternatively, you can install MacVim (&lt;code&gt;brew install macvim&lt;/code&gt;).
This will not replace the old vim; the old vim can still be accessed at &lt;code&gt;/usr/bin/vim&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="install-pathogen"&gt;Install &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;&lt;a class="headerlink" href="#install-pathogen" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add &lt;code&gt;execute pathogen#infect()&lt;/code&gt; to your &lt;code&gt;.vimrc&lt;/code&gt;.
If you're using &lt;a href="https://github.com/sharmaeklavya2/dotfiles"&gt;my dotfiles&lt;/a&gt;,
you'll already have it in your &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="get-vim-plugins"&gt;Get Vim plugins&lt;a class="headerlink" href="#get-vim-plugins" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just go to &lt;code&gt;~/.vim/bundle&lt;/code&gt; and clone the git repositories of the plugins you need.
You can see the list of plugins that I use at
&lt;a href="https://github.com/sharmaeklavya2/dotfiles/blob/master/vimpackages.txt"&gt;&lt;code&gt;vimpackages.txt&lt;/code&gt;&lt;/a&gt; in my dotfiles.&lt;/p&gt;
&lt;p&gt;If you're using my dotfiles, you can run &lt;code&gt;./scripts/get_vim_packages.py&lt;/code&gt;.
This will download the vim plugins from &lt;code&gt;vimpackages.txt&lt;/code&gt; and place them in a directory named &lt;code&gt;vim_bundle&lt;/code&gt;.
&lt;a href="https://kb.iu.edu/d/abbe"&gt;Symlink&lt;/a&gt; &lt;code&gt;vim_bundle&lt;/code&gt; to &lt;code&gt;~/.vim/bundle&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="install-youcompleteme"&gt;Install &lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt;&lt;a class="headerlink" href="#install-youcompleteme" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;YouCompleteMe is a vim plugin for code auto-completion.
To install this plugin:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;brew install cmake&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ~/.vim/bundle ; git clone --recursive https://github.com/ycm-core/YouCompleteMe.git ; cd YouCompleteMe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you use a python virtualenv, switch to it and then run &lt;code&gt;./install.py&lt;/code&gt;.
If you don't switch to the virtualenv before running &lt;code&gt;./install.py&lt;/code&gt;,
python auto-complete may not work for external libraries installed in that virtualenv.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should read &lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;the documentation&lt;/a&gt;
for more detailed installation instructions. This is important if you
want good completion for C, C++, Java, Rust, Go or JavaScript
(Python auto-complete works out-of-the-box and I'm okay with rudimentary auto-complete for other languages).&lt;/p&gt;
&lt;p&gt;The documentation says that MacVim is required,
but I'm able to use YouCompleteMe with Vim installed via &lt;code&gt;brew install vim&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="fix-vim-locale-error"&gt;Fix Vim locale error&lt;a class="headerlink" href="#fix-vim-locale-error" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You may get error messages like this when you start Vim:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Warning: Failed to set locale category LC_NUMERIC to en_IN.
Warning: Failed to set locale category LC_TIME to en_IN.
Warning: Failed to set locale category LC_COLLATE to en_IN.
Warning: Failed to set locale category LC_MONETARY to en_IN.
Warning: Failed to set locale category LC_MESSAGES to en_IN.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fix this by adding &lt;code&gt;export LC_ALL=en_US.UTF-8&lt;/code&gt; to &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.env&lt;/code&gt;
(&lt;a href="https://discourse.brew.sh/t/failed-to-set-locale-category-lc-numeric-to-en-ru/5092"&gt;brew forum post&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="install-nginx-and-serve-website-mirrors"&gt;&lt;span style="background-color: #D2B4DE"&gt;Install Nginx and serve website mirrors&lt;/span&gt;&lt;a class="headerlink" href="#install-nginx-and-serve-website-mirrors" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I use &lt;a href="https://nginx.org/en/"&gt;Nginx&lt;/a&gt; to serve static content.
It's useful to access local websites that I downloaded or created.&lt;/p&gt;
&lt;h3 id="install-and-run-nginx"&gt;Install and run Nginx&lt;a class="headerlink" href="#install-and-run-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;brew install nginx
nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now go to http://localhost:8080. You should see a welcome page from Nginx.&lt;/p&gt;
&lt;h3 id="enable-nginx-autoindex"&gt;Enable nginx autoindex&lt;a class="headerlink" href="#enable-nginx-autoindex" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Go to &lt;code&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt; and
add &lt;code&gt;autoindex on;&lt;/code&gt; to '&lt;code&gt;http&lt;/code&gt; &amp;gt; &lt;code&gt;server&lt;/code&gt; &amp;gt; &lt;code&gt;location /&lt;/code&gt;'.
You may also wish to change the port from 8080 to something else by changing the &lt;code&gt;listen&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Then rename &lt;code&gt;/usr/local/var/www/index.html&lt;/code&gt; to &lt;code&gt;/usr/local/var/www/index.html~&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After making these changes, run &lt;code&gt;nginx -s reload&lt;/code&gt; for the changes to take effect.&lt;/p&gt;
&lt;p&gt;Visit http://localhost:8080 again. Now instead of seeing the welcome page,
you should see the list of files in &lt;code&gt;/usr/local/var/www&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="serve-my-websites-with-nginx"&gt;Serve my websites with Nginx&lt;a class="headerlink" href="#serve-my-websites-with-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I had backed up compressed archives of my websites to my external hard disk.
I copied the websites from there, uncompressed them, and placed them in &lt;code&gt;/usr/local/var/www&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can put symlinks in &lt;code&gt;/usr/local/var/www&lt;/code&gt;, but &lt;code&gt;/usr/local/var/www&lt;/code&gt; itself cannot be a symlink.&lt;/p&gt;</content><category term="Tutorial"></category></entry><entry><title>Making a keyboard-navigable collapsible without JavaScript</title><link href="https://sharmaeklavya2.github.io/blog/css-collapsible.html" rel="alternate"></link><published>2018-11-01T00:00:00+05:30</published><updated>2018-11-01T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2018-11-01:/blog/css-collapsible.html</id><summary type="html">&lt;p&gt;A 'collapsible' is content whose visibility can be toggled by clicking something. However, users without a mouse should also be able to open the collapsed content. This article explains how to make a keyboard-navigable collapsible without using JavaScript.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A 'collapsible' is content whose visibility can be toggled. Here is an example:&lt;/p&gt;
&lt;div class="collapsible" style="clear: both"&gt;
    &lt;label for="checkbox0" class="collapsor-lbl"&gt; Click me &lt;/label&gt;
    &lt;div class="focus-capturer" tabindex="0"&gt;
        &lt;input id="checkbox0" class="collapsor" type="checkbox" /&gt;
        &lt;div class="collapsible-content"&gt;
            &lt;p&gt;This is the body of the collapsible. Its visibility can be toggled using the 'click me' button.&lt;/p&gt;
            &lt;p&gt;Here we will learn how to make such a collapsible without using JavaScript.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this article, we'll look at how to make one.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#skeleton"&gt;Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collapsibility"&gt;Collapsibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility"&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use"&gt;Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="skeleton"&gt;Skeleton&lt;a class="headerlink" href="#skeleton" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let's first create the basic structure without collapsibility.&lt;/p&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsible&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsor-lbl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Click me &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsible-content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        This is the body of the collapsible.
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS (for beautification):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.collapsible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.collapsor-lbl&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.collapsor-lbl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.collapsible-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is what the output looks like:&lt;/p&gt;
&lt;div class="collapsible"&gt;
    &lt;div class="collapsor-lbl"&gt; Click me &lt;/div&gt;
    &lt;div class="collapsible-content" style="display: block"&gt;
        This is the body of the collapsible.
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="collapsibility"&gt;Collapsibility&lt;a class="headerlink" href="#collapsibility" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add collapsibility, we're going to use a checkbox.
I read about it on the blog post
'&lt;a href="https://alligator.io/css/collapsible/"&gt;Implementing A Pure CSS Collapsible&lt;/a&gt;' by alligator.io.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A checkbox maintains state about whether it's checked or not.
  We can use that to maintain state about whether our collapsible has been clicked or not.&lt;/li&gt;
&lt;li&gt;We can use the CSS style &lt;code&gt;display:none&lt;/code&gt; to make the checkbox disappear, but still retain its functionality.&lt;/li&gt;
&lt;li&gt;We can use the CSS pseudo-selector &lt;code&gt;:checked&lt;/code&gt; to select a checked checkbox.&lt;/li&gt;
&lt;li&gt;We will make sure that &lt;code&gt;.collapsible-content&lt;/code&gt; is a sibling of the checkbox.
  Then we can use the CSS sibling combinator '&lt;code&gt;~&lt;/code&gt;' to select it.
  When used together with &lt;code&gt;:checked&lt;/code&gt; on checkbox, we can select &lt;code&gt;.collapsible-content&lt;/code&gt; only when the checkbox is checked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Change the HTML to this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsible&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsor&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsor-lbl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Click me &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsible-content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        This is the body of the collapsible.
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add this CSS:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.collapsor-lbl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.collapsor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.collapsible-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.collapsor&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.collapsible-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="collapsible"&gt;
    &lt;input id="checkbox1" class="collapsor" type="checkbox" /&gt;
    &lt;label for="checkbox1" class="collapsor-lbl"&gt; Click me &lt;/label&gt;
    &lt;div class="collapsible-content"&gt;
        This is the body of the collapsible.
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="accessibility"&gt;Accessibility&lt;a class="headerlink" href="#accessibility" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Web accessibility is the inclusive practice of ensuring there are no barriers that
prevent interaction with, or access to websites, by people with disabilities.
&lt;footer&gt;&lt;a href="https://en.wikipedia.org/wiki/Web_accessibility"&gt;Wikipedia article on Web Accessibility&lt;/a&gt;&lt;/footer&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I once had a mouse that sometimes stopped functioning, so I can feel a bit of the pain of users who cannot use a mouse.
Also, some people &lt;em&gt;like&lt;/em&gt; using the keyboard for navigation and it would be bad to force them to use a mouse.&lt;/p&gt;
&lt;p&gt;I don't know much about web accessibility standards and what it takes for my websites to be fully accessible,
but the least I can do is make my pages keyboard-navigable.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://alligator.io/css/collapsible/#a-note-on-accessibility"&gt;blog post by alligator.io&lt;/a&gt;
says how to make a collapsible using only CSS, but to make it accessible they had to use JavaScript.
I, however, have a way of doing it without JavaScript. Prepare to get enlightened!&lt;/p&gt;
&lt;p&gt;When navigating a web page using the tab key, certain HTML elements have the potential of receiving focus.
This generally includes links (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags) and form elements (&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags).
When an element receives focus, it gets the &lt;code&gt;:focus&lt;/code&gt; CSS pseudo-class.
Also, that element and all its descendants get the &lt;code&gt;:focus-within&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;We will therefore wrap &lt;code&gt;.collapsible-content&lt;/code&gt; within a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.
We will make that &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; capable of receiving focus via tab by setting the attribute &lt;code&gt;tabindex&lt;/code&gt; to &lt;code&gt;"0"&lt;/code&gt;.
Then whenever that div has the &lt;code&gt;:focus-within&lt;/code&gt; pseudo-class set,
we will set &lt;code&gt;display: block&lt;/code&gt; on &lt;code&gt;.collapsible-content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Change the HTML to this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsible&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsor-lbl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Click me &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;focus-capturer&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsor&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapsible-content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the body of the collapsible.&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add this CSS:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.focus-capturer&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="nc"&gt;.collapsible-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="collapsible"&gt;
    &lt;label for="checkbox2" class="collapsor-lbl"&gt; Click me &lt;/label&gt;
    &lt;div class="focus-capturer" tabindex="0"&gt;
        &lt;input id="checkbox2" class="collapsor" type="checkbox" /&gt;
        &lt;div class="collapsible-content"&gt;
            &lt;p&gt;This is the body of the collapsible.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=""&gt;link1&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""&gt;link2&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""&gt;link3&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Try using the tab key to navigate all the 3 links in the collapsible.
When the focus moves out of the collapsible, it closes (unless you had clicked on it to open it).&lt;/p&gt;
&lt;p&gt;Navigation using Shift+Tab is a bit wonky though.&lt;/p&gt;
&lt;h2 id="use"&gt;Use&lt;a class="headerlink" href="#use" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When my blog's website is viewed on a screen of size less than 800 pixels, the navigation bar moves to the top.
It becomes collapsible and users have to click the '&amp;equiv;' button to open it.
I have used the above technique to implement this collapsible navigation bar.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a href="https://github.com/sharmaeklavya2/blog/issues/new"&gt;reach out&lt;/a&gt;
for comments, criticism or suggestions.&lt;/p&gt;</content><category term="Front-end web dev"></category><category term="Tutorial"></category></entry><entry><title>Juggling 101</title><link href="https://sharmaeklavya2.github.io/blog/juggling-101.html" rel="alternate"></link><published>2017-12-03T00:00:00+05:30</published><updated>2017-12-03T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2017-12-03:/blog/juggling-101.html</id><summary type="html">&lt;p&gt;This is a tutorial for those who wish to learn juggling and have absolutely no prior experience. Here you will find links to resources that will help you learn your first juggling pattern and suggestions about what kind of balls to use, what posture you should have, etc.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a tutorial for those who wish to learn juggling and have absolutely no prior experience.
Here you will find links to resources that will help you learn your first juggling pattern
and suggestions about what kind of balls to use, what posture you should have, etc.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-informed-and-motivated"&gt;Getting informed and motivated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-first-pattern"&gt;Your first pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-balls"&gt;Get balls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#choose-an-environment"&gt;Choose an environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-advice"&gt;Other advice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#things-to-be-vigilant-about-while-juggling"&gt;Things to be vigilant about while juggling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#good-luck"&gt;Good luck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="getting-informed-and-motivated"&gt;Getting informed and motivated&lt;a class="headerlink" href="#getting-informed-and-motivated" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to learn juggling, you should first know what juggling looks like.
Watch these awesome videos, which portray many common styles of juggling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wP8tbLBls_M"&gt;Anthony Gatto's performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cvME9BLYgsw"&gt;World Juggling day Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="your-first-pattern"&gt;Your first pattern&lt;a class="headerlink" href="#your-first-pattern" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first juggling pattern you should learn is the 3-ball cascade.
This is what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/3.gif" title="3-cascade" /&gt;&lt;/p&gt;
&lt;p&gt;Most people try to begin with the 3-ball shower.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/51.gif" title="3-shower" /&gt;&lt;/p&gt;
&lt;p&gt;This is not recommended. The shower is more difficult than the cascade.
Don't even try to learn the shower before the cascade; it will make it more difficult to learn the cascade.&lt;/p&gt;
&lt;p&gt;You can find out how to learn the cascade by watching instructional videos.
You can find many such videos on YouTube if you search 'cascade juggling tutorial'
(for example, &lt;a href="https://www.youtube.com/watch?v=x2_j6kMg1co"&gt;this video&lt;/a&gt; by Niels Duinker).&lt;/p&gt;
&lt;p&gt;If you practice the cascade for around 15 minutes a day, you'll be able to learn it in around a week.
Consistency is very important in juggling (for any pattern, not just cascade).
If you don't practice for a few days, you will most likely forget the patterns you haven't mastered.
Practice every day for best results.&lt;/p&gt;
&lt;h2 id="get-balls"&gt;Get balls&lt;a class="headerlink" href="#get-balls" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Almost any not-easily-breakable spherical object of an appropriate size and weight is good enough to juggle,
but we'll discuss the options commonly available.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tennis or Cricket balls (not the leather ones): These are what I currently use.&lt;/li&gt;
&lt;li&gt;Sponge balls: These are great if you're juggling in an environment with a lot of breakables.
  But they bounce off from hands and they lack weight.
  I learned juggling with them, but I recommend not starting with them.&lt;/li&gt;
&lt;li&gt;Beanbags: They're small bags filled tight with small beans or beads so that they are almost spherical.
  They don't bounce and roll off, which can make juggling less annoying when you begin learning.&lt;/li&gt;
&lt;li&gt;Purpose-made: These are balls specifically made for juggling.
  I once juggled with them and I think they're much better than all other alternatives.
  But they're expensive and can usually only be bought online.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beanbags and purpose-made balls are good, but they're either difficult to find or expensive.
That's why I have been using tennis balls.&lt;/p&gt;
&lt;p&gt;Buy an extra ball so that when you lose a ball,
you can keep practicing till you get a new one.&lt;/p&gt;
&lt;h2 id="choose-an-environment"&gt;Choose an environment&lt;a class="headerlink" href="#choose-an-environment" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you don't have breakables in your environment (unless you're juggling with sponge balls).&lt;/li&gt;
&lt;li&gt;The place should be well lit (this makes much more difference than most people think).&lt;/li&gt;
&lt;li&gt;The place should have a high enough ceiling.&lt;/li&gt;
&lt;li&gt;Make sure you can recover balls if they roll away
  (for example, under the furniture if you're juggling at home, or into bushes if you're juggling in a park).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're a student in a hostel, a common room is often a good place to juggle.
Hostel corridors are generally also good.&lt;/p&gt;
&lt;p&gt;Try to not juggle in the exact same place facing in the exact same direction every time.
If you do that, you'll get used to a particular environment and it might be difficult to juggle elsewhere.&lt;/p&gt;
&lt;h2 id="other-advice"&gt;Other advice&lt;a class="headerlink" href="#other-advice" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Keep nails short to avoid injury.&lt;/p&gt;
&lt;p&gt;Get in the habit of counting your throws so that you can track your progress.
Sometimes you'll not see any progress for a few days despite regular practice.
Sometimes your performance could be less than the previous day.
Such incidences sometimes mean that your technique is incorrect.
But it usually happens to me for no obvious reason.
Don't give up. That's normal as far as I know. You'll eventually make progress.&lt;/p&gt;
&lt;h2 id="things-to-be-vigilant-about-while-juggling"&gt;Things to be vigilant about while juggling&lt;a class="headerlink" href="#things-to-be-vigilant-about-while-juggling" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here's a list of things you should be vigilant about while juggling.
If you can ensure all of these, you'll make progress faster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep a correct stance. Feet should be at shoulder distance. This will increase stability.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://en.wikipedia.org/wiki/Humerus"&gt;humerus&lt;/a&gt; should be roughly perpendicular to the ground.
  This will keep the juggling pattern plane at the right distance from you.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://en.wikipedia.org/wiki/Radius_(bone)"&gt;radius&lt;/a&gt; and
  &lt;a href="https://en.wikipedia.org/wiki/Ulna"&gt;ulna&lt;/a&gt; should be roughly perpendicular to the humerus.
  This will keep the juggling pattern at the correct height.&lt;/li&gt;
&lt;li&gt;For patterns with simple throws, there should be low variance in catch points.&lt;/li&gt;
&lt;li&gt;Keep the pattern in a plane parallel to yourself.&lt;/li&gt;
&lt;li&gt;If you're repeatedly throwing too forward, try holding on to props for longer.&lt;/li&gt;
&lt;li&gt;Don't rotate yourself while juggling (unless that's an intended trick).&lt;/li&gt;
&lt;li&gt;Avoid jerk throws, i.e giving a very large acceleration to balls for a very short time
  (heavy balls sometimes help prevent jerk throws).&lt;/li&gt;
&lt;li&gt;Avoid looking funny (for example, some people open their mouth while juggling high patterns).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="good-luck"&gt;Good luck&lt;a class="headerlink" href="#good-luck" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That's all! Keep practicing regularly and you'll soon be able to juggle the cascade.
I'll soon post another tutorial where I'll write about what you should learn next.&lt;/p&gt;</content><category term="Juggling"></category><category term="Tutorial"></category></entry><entry><title>How I began Juggling</title><link href="https://sharmaeklavya2.github.io/blog/how-i-began-juggling.html" rel="alternate"></link><published>2017-12-02T00:00:00+05:30</published><updated>2017-12-02T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2017-12-02:/blog/how-i-began-juggling.html</id><summary type="html">&lt;p&gt;Since childhood, juggling had captivated me and I always wanted to learn how to juggle.
However, all my initial attempts to learn it failed. It was so difficult.
I couldn't make any progress even when I tried for hours.&lt;/p&gt;
&lt;p&gt;Then one day (in 2011, when I was around 16 years …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since childhood, juggling had captivated me and I always wanted to learn how to juggle.
However, all my initial attempts to learn it failed. It was so difficult.
I couldn't make any progress even when I tried for hours.&lt;/p&gt;
&lt;p&gt;Then one day (in 2011, when I was around 16 years old),
I saw a documentary-ish thing on TV about juggling.
According to it, there are multiple ways of juggling. Those ways are called 'patterns'.
The pattern below is called the 'shower' pattern:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Shower pattern" src="https://sharmaeklavya2.github.io/blog/img/siteswaps/51.gif"&gt;&lt;/p&gt;
&lt;p&gt;It turned out that the shower is a difficult juggling pattern.
There's a juggling pattern easier than the shower, called 'cascade':&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cascade pattern" src="https://sharmaeklavya2.github.io/blog/img/siteswaps/3.gif"&gt;&lt;/p&gt;
&lt;p&gt;All my life, I had been trying to learn the shower
because that was the only juggling pattern I could imagine.
But as soon as I realized that cascade was easier, I tried learning that instead.
And this time I made some progress.
After around a week of practice, I could juggle for up to 10 seconds.&lt;/p&gt;
&lt;p&gt;I don't remember why, but I didn't pursue juggling any further then.
I resumed it 3 years later.
I got better at cascade and then started learning other juggling patterns (including the shower).
Near the end of my first year at BITS (2014),
I bought juggling &lt;a href="https://en.wikipedia.org/wiki/Juggling_club"&gt;clubs&lt;/a&gt;.
By October 2017, I knew around 25 patterns with 3 balls, 8 patterns with 4 balls, the 5-ball cascade
and 7 patterns with 3 clubs.&lt;/p&gt;
&lt;p&gt;I didn't make much progress in 2016 and 2017.
I have been busy with studies and haven't been able to juggle regularly.&lt;/p&gt;
&lt;p&gt;You can find videos documenting my juggling skills on youtube:
&lt;a href="https://www.youtube.com/watch?v=xYrnQMHfDNE&amp;amp;list=PLACN_dyOcd_WSIzGV-4hVCQyQFmzKH1kb"&gt;Juggling by me (October 2015)&lt;/a&gt;.&lt;/p&gt;</content><category term="Juggling"></category><category term="About Me"></category></entry><entry><title>How to juggle 3 balls in 1 hand</title><link href="https://sharmaeklavya2.github.io/blog/3-in-1.html" rel="alternate"></link><published>2017-11-14T00:00:00+05:30</published><updated>2017-11-14T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2017-11-14:/blog/3-in-1.html</id><summary type="html">&lt;p&gt;&lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/60.gif" title="60" /&gt;&lt;/p&gt;
&lt;p&gt;3 balls in 1 hand, a.k.a. 3-in-1, is definitely not an easy pattern,
mostly because of the speed, accuracy and strength required to do it.
I could learn to do it because I came up with good prerequisites.
It still took me a few months to learn it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/60.gif" title="60" /&gt;&lt;/p&gt;
&lt;p&gt;3 balls in 1 hand, a.k.a. 3-in-1, is definitely not an easy pattern,
mostly because of the speed, accuracy and strength required to do it.
I could learn to do it because I came up with good prerequisites.
It still took me a few months to learn it and I still haven't mastered it.&lt;/p&gt;
&lt;p&gt;Throughout this tutorial, I'll assume that you want to juggle 3 balls in your right hand.
If you want to juggle with your left hand, just mirror-invert all instructions here.
In all &lt;a href="https://en.wikipedia.org/wiki/Siteswap"&gt;siteswaps&lt;/a&gt; mentioned here,
the first throw will be from the right hand.&lt;/p&gt;
&lt;p&gt;First of all, you should have mastered the 3 ball shower (siteswap &lt;code&gt;51&lt;/code&gt;) to almost perfection.
There are 2 mirror-images of the shower.
You must perfect the one where the left hand makes the horizontal pass
(i.e. siteswap &lt;code&gt;51&lt;/code&gt;, not &lt;code&gt;15&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then you must learn to make a type-6 throw.
While juggling &lt;code&gt;51&lt;/code&gt;, replace one of the type-5 throws by a type-6 throw.
It'll look similar to &lt;code&gt;6151505151515151&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/6151505151515151.gif" /&gt;
    &lt;figcaption&gt;6151505151515151&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Practice this until you find it easy to replace a type-5 throw by a type-6 throw.&lt;/p&gt;
&lt;p&gt;Now practice &lt;code&gt;615150&lt;/code&gt;, then &lt;code&gt;6051&lt;/code&gt;, then &lt;code&gt;61615050&lt;/code&gt; and then &lt;code&gt;606150&lt;/code&gt;.&lt;/p&gt;
&lt;div class="gallery"&gt;
&lt;figure&gt;
    &lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/615150.gif" /&gt;
    &lt;figcaption&gt;615150&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/6051.gif" /&gt;
    &lt;figcaption&gt;6051&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/61615050.gif" /&gt;
    &lt;figcaption&gt;61615050&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img src="https://sharmaeklavya2.github.io/blog/img/siteswaps/606150.gif" /&gt;
    &lt;figcaption&gt;606150&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You might also want to try out other variations.
After you get good at these, you can finally try 3-in-1.&lt;/p&gt;
&lt;p&gt;You might also like this &lt;a href="https://www.youtube.com/watch?v=z2k3ugex7Kw"&gt;video tutorial by Chris Taibbi&lt;/a&gt;.&lt;/p&gt;</content><category term="Juggling"></category><category term="Tutorial"></category></entry><entry><title>Hobbies and Interests</title><link href="https://sharmaeklavya2.github.io/blog/hobbies.html" rel="alternate"></link><published>2017-10-01T00:00:00+05:30</published><updated>2019-04-01T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2017-10-01:/blog/hobbies.html</id><summary type="html">&lt;p&gt;My hobbies, interests and preferences, along with descriptions and references.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's an attempt to exhaustively document my hobbies, interests and preferences.
In each section, things are arranged in roughly decreasing order of relevance.&lt;/p&gt;
&lt;p&gt;Sometimes you may not know what something means exactly.
Looking it up on Wikipedia will often give you a good idea.
For things whose Wikipedia articles may not be well written,
I'll provide other references.&lt;/p&gt;
&lt;h2 id="interests"&gt;Interests&lt;a class="headerlink" href="#interests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Structures, Algorithms and Theoretical Computer Science&lt;/strong&gt;:
  For those who have no idea what the word 'Algorithm' means, look it up on the
  &lt;a href="https://simple.wikipedia.org/wiki/Algorithm"&gt;simple English Wikipedia&lt;/a&gt;.
  I started studying DSA (Data Structures and Algorithms) in my first year at BITS
  so that I could become better at competitive programming.
  But in my second year, I developed a liking for it by itself.
  In subsequent years, I studied and got interested in more areas of theoretical computer science,
  like theory of computation and computational complexity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Competitive Programming&lt;/strong&gt;:
  I solved some math and programming problems on &lt;a href="https://projecteuler.net"&gt;Project Euler&lt;/a&gt; when I was in class 12
  and solved many algorithmic programming problems in college, mostly in my first year.
  I occasionally still solve problems on &lt;a href="https://www.codechef.com/users/sharmaeklavya2"&gt;Codechef&lt;/a&gt;
  and &lt;a href="http://codeforces.com/profile/eku"&gt;Codeforces&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Math&lt;/strong&gt;: I like abstract algebra, number theory and linear algebra.
  In 2019, I began writing down some of my knowledge on my
  &lt;a href="https://sharmaeklavya2.github.io/theoremdep"&gt;theorems website&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Juggling&lt;/strong&gt;:
  I started juggling after my entrance exams and before joining BITS.
  I know over 30 juggling patterns now. You can watch me juggle on
  &lt;a href="https://www.youtube.com/watch?v=xYrnQMHfDNE&amp;amp;list=PLACN_dyOcd_WSIzGV-4hVCQyQFmzKH1kb"&gt;YouTube&lt;/a&gt;.
  One of my first inspirations was this great
  &lt;a href="https://www.youtube.com/watch?v=wP8tbLBls_M"&gt;juggling video of Anthony Gatto&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anime&lt;/strong&gt;:
  'Attack on Titan' is my favorite. I have also watched 'Death Note', 'Fullmetal Alchemist (Brotherhood)',
  'My Hero Academia' (first season only) and 'The Last Airbender'.
  Do not look them up on Wikipedia; you'll get spoilers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webcomics&lt;/strong&gt;:
  Webcomics are comic strips put up on websites.
  I like &lt;a href="https://xkcd.com"&gt;XKCD&lt;/a&gt;, &lt;a href="https://smbc-comics.com"&gt;SMBC&lt;/a&gt; and &lt;a href="https://www.jspowerhour.com"&gt;JSPH&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Software development&lt;/strong&gt;:
  See &lt;a href="https://github.com/sharmaeklavya2"&gt;my Github profile&lt;/a&gt; for projects I have done.
  It used to be my primary hobby in my sophomore year at BITS but I'm no longer as interested in it now.
  I still like to do it occasionally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Watching videos on YouTube&lt;/strong&gt;:
  Refer to my &lt;a href="https://www.youtube.com/channel/UCsI0Lrna_yR_X9H5m_ubM9A/channels"&gt;subscriptions&lt;/a&gt;
  and &lt;a href="https://www.youtube.com/playlist?list=LLsI0Lrna_yR_X9H5m_ubM9A"&gt;liked videos&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Balancing&lt;/strong&gt;:
  In my third year at BITS, I learned how to balance long sticks on my foot, chin and nose.
  Here's &lt;a href="https://www.youtube.com/watch?v=sOju-b6JRxI"&gt;my video on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Watching movies&lt;/strong&gt;:
  I rarely watch movies (less than once a month).
  I mostly watch English movies.
  My favorites are 'The Matrix' and 'Avatar'. I also like Marvel movies.
  Among Indian movies, Baahubali is my favorite.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Video games&lt;/strong&gt;:
  I used to play a lot of video games before college.
  My favorites include Rally racing, GTA Vice City and 2D platform games.
  I stopped after that mostly because I have been busy and I no longer have Windows.
  Sometimes I play strategy mini-games like &lt;a href="https://alexnisnevich.github.io/untrusted/"&gt;Untrusted&lt;/a&gt;
  and &lt;a href="http://code.jerev.be/ggo13-transcube/"&gt;Transcube&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cycling&lt;/strong&gt;:
  I love cycling as a mode of transport. I used it to commute to classes at BITS.
  I wish cycling was safer on city roads in India. I can cycle without holding the handlebars.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dislikes"&gt;Dislikes&lt;a class="headerlink" href="#dislikes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tourism&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Attending parties, dinners, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="preferences"&gt;Preferences&lt;a class="headerlink" href="#preferences" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Music&lt;/strong&gt;:
  I mostly like rock and some western classical.
  I also like Indian classical but good songs are harder to find in that category.
  Here are some of my favorites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Stage - Avenged Sevenfold&lt;/li&gt;
&lt;li&gt;Mello theme - Death Note soundtrack&lt;/li&gt;
&lt;li&gt;Hotel California - Eagles&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1B4pZBmI_gU"&gt;Arpeggios from Hell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mr. Crowley - Ozzy Osbourne&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=I6y0eYcIJ5I"&gt;Minute Waltz - Chopin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XWS1IRF_IFA"&gt;Angelina - Tommy Emmanuel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=c5bzrB5QbSY"&gt;Cesar Frank Sonata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_sHURJwNjB8"&gt;Flight of the Bumblebee - Nikolai Rimsky-Korsakov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;River flows in you - Yiruma&lt;/li&gt;
&lt;li&gt;Millennium of the Blind - Megadeth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Food&lt;/strong&gt;:
  I'm vegetarian. South Indian food is my favorite.
  Very oily food makes me nauseous and some North Indian cuisines (especially that of Rajasthan) are very oily.
  I can also cook basic food.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operating System&lt;/strong&gt;:
  I strongly prefer Linux (all distributions I have ever seen) and macOS over Windows.
  My favorite thing about Linux and macOS is that they are Unix-like OSes where
  I can use &lt;a href="https://en.wikipedia.org/wiki/Terminal_emulator"&gt;the terminal&lt;/a&gt; for most of my work.
  This might seem primitive to most people, but I think the terminal is better than graphical programs
  for a lot of tasks once you get used to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Programming language&lt;/strong&gt;:
  Python is my favorite for day-to-day programming and projects.
  For competitive programming, I use C/C++. I also know Java.
  I prefer C/C++ as a first language to be taught rather than Python or Java.
  Haskell is the most elegant language I have seen,
  but I rarely use it because I find pure functional programming difficult.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Text editor&lt;/strong&gt;: Vim is my favorite. I haven't yet tried Emacs.
  You can check out my &lt;a href="https://github.com/sharmaeklavya2/dotfiles/blob/master/dotfiles/.vimrc"&gt;.vimrc&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="About Me"></category></entry></feed>