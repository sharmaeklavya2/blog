<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eklavya's Blog - latex</title><link href="https://sharmaeklavya2.github.io/blog/" rel="alternate"></link><link href="https://sharmaeklavya2.github.io/blog/feed/latex.atom.xml" rel="self"></link><id>https://sharmaeklavya2.github.io/blog/</id><updated>2023-01-05T00:00:00+05:30</updated><entry><title>LaTeX tips</title><link href="https://sharmaeklavya2.github.io/blog/latex-tips.html" rel="alternate"></link><published>2022-11-13T00:00:00+05:30</published><updated>2023-01-05T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2022-11-13:/blog/latex-tips.html</id><summary type="html">&lt;p&gt;This article lists LaTeX tips. The primary audience is my current and future collaborators, but it should be useful to other people too. To prevent stating facts that are either obvious or irrelevant to my primary audience, most of these tips are based on subtle 'mistakes' by other researchers and grad students.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have collaborated on LaTeX documents with many people.
Although it should be expected that each person has their own unique style,
there are a few best practices which I recommend others to follow.
In this article, I'll list some of these best practices.&lt;/p&gt;
&lt;p&gt;The primary audience of this article are my current and future collaborators,
but it should be useful to other LaTeX users too, mostly other academics.
To prevent these tips from being obvious or irrelevant to my primary audience,
most of them are either based on subtle 'mistakes' by other researchers and grad students,
or are tricks I discovered/invented to ease collaboration.&lt;/p&gt;
&lt;p&gt;&lt;span class="danger"&gt;This article is an incomplete draft.
I will add more tips and elaborate on existing ones.&lt;/span&gt;&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#general-tex-and-latex-best-practices"&gt;General TeX and LaTeX best practices&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#always-include-hyperref"&gt;Always include hyperref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-cleveref"&gt;Use cleveref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handle-the-warnings"&gt;Handle the warnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supply-alt-text-in-section-titles"&gt;Supply alt-text in section titles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multi-file-projects-and-makefile"&gt;Multi-file projects and makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-writing-papers-for-submission"&gt;Tips for writing papers for submission&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#splitting-a-document-into-multiple-tex-files"&gt;Splitting a document into multiple tex files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#easily-convert-abstract-to-plain-text"&gt;Easily convert abstract to plain text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#collaborating-with-a-git-user"&gt;Collaborating with a git user&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="general-tex-and-latex-best-practices"&gt;General TeX and LaTeX best practices&lt;a class="headerlink" href="#general-tex-and-latex-best-practices" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="always-include-hyperref"&gt;Always include &lt;code&gt;hyperref&lt;/code&gt;&lt;a class="headerlink" href="#always-include-hyperref" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always &lt;code&gt;\usepackage{hyperref}&lt;/code&gt; in your document.
It won't affect what your document looks like when you print it on paper,
but it will improve the digital reading experience,
like making references clickable and adding a table of contents.&lt;/p&gt;
&lt;p&gt;The order in which you load packages matters.
Most packages should be loaded before &lt;code&gt;hyperref&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can pass several options to hyperref either while loading the package
(&lt;code&gt;usepackage[options]{hyperref}&lt;/code&gt;) or later (&lt;code&gt;\hypersetup{options}&lt;/code&gt;).
Some useful options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bookmarksnumbered=true&lt;/code&gt;: Table of contents entries will be numbered.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypertexnames=false&lt;/code&gt;: To work around hyperref-related bugs in some packages.
    Example: &lt;a href="https://tex.stackexchange.com/a/670742"&gt;https://tex.stackexchange.com/a/670742&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidelinks&lt;/code&gt; and &lt;code&gt;colorlinks&lt;/code&gt;: &lt;code&gt;hyperref&lt;/code&gt;'s default behavior is to box links.
    Instead, if you want to color the links, use &lt;code&gt;colorlinks&lt;/code&gt;.
    If you want to neither box nor color links, use &lt;code&gt;hidelinks&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linkcolor&lt;/code&gt;, &lt;code&gt;citecolor&lt;/code&gt;, &lt;code&gt;urlcolor&lt;/code&gt;:
    specify colors to use for internal links, citations, and URLs, respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the following options in my old ArXiv papers
(the options I use now are a little more complicated):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\hypersetup{bookmarksnumbered=true,colorlinks,linkcolor=red,citecolor=red,urlcolor=blue}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="use-cleveref"&gt;Use cleveref&lt;a class="headerlink" href="#use-cleveref" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always &lt;code&gt;\usepackage{cleveref}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cleveref&lt;/code&gt; allows you to write &lt;code&gt;\cref{lower-bound}&lt;/code&gt; instead of &lt;code&gt;Theorem \ref{lower-bound}&lt;/code&gt;,
because &lt;code&gt;cleveref&lt;/code&gt; automatically detects which kind of thing you're referring to.
If you ever decide to change a theorem to a lemma,
you won't have to find and replace every &lt;code&gt;Theorem \ref{lower-bound}&lt;/code&gt; to &lt;code&gt;Lemma \ref{lower-bound}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Official documentation: &lt;a href="https://mirrors.mit.edu/CTAN/macros/latex/contrib/cleveref/cleveref.pdf"&gt;&lt;code&gt;CTAN:cleveref&lt;/code&gt;&lt;/a&gt;.
Useful options you may want to check out: &lt;code&gt;capitalize&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;.
Load &lt;code&gt;cleveref&lt;/code&gt; after &lt;code&gt;hyperref&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Name your references such that it's possible to know what kind of thing it is:
theorem, definition, section, figure, etc.
Preferably do this by using a prefix: &lt;code&gt;thm:&lt;/code&gt;, &lt;code&gt;defn:&lt;/code&gt;, &lt;code&gt;sec:&lt;/code&gt;, &lt;code&gt;fig:&lt;/code&gt;, etc.
(e.g., &lt;code&gt;\label{thm:lower-bound}&lt;/code&gt; instead of &lt;code&gt;\label{lower-bound}&lt;/code&gt;).
This makes it easier to know what is being referenced when reading the TeX source.
Don't use different prefixes for theorems, lemmas, observations, claims;
use &lt;code&gt;thm:&lt;/code&gt; for all of them (otherwise there's no point in using &lt;code&gt;cleveref&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="handle-the-warnings"&gt;Handle the warnings&lt;a class="headerlink" href="#handle-the-warnings" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Please read the warnings that are generated by TeX/LaTeX.
Most of them indicate something wrong with your document.&lt;/p&gt;
&lt;p&gt;Overleaf has a pretty interface that extracts warnings from
the large amount of garbage that TeX outputs on &lt;code&gt;stdout&lt;/code&gt;.
If you're using TeX on your own computer via the command line,
you may want to use an external tool to extract warnings.
I made one such tool: &lt;a href="https://github.com/sharmaeklavya2/tex-filter"&gt;github:sharmaeklavya2/tex-filter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you feel that a warning is a 'false alarm', then try to hide/suppress that warning.
Otherwise the output is so full of false warnings that useful warnings are hard to spot.&lt;/p&gt;
&lt;h3 id="supply-alt-text-in-section-titles"&gt;Supply alt-text in section titles&lt;a class="headerlink" href="#supply-alt-text-in-section-titles" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you &lt;code&gt;\usepackage{hyperref}&lt;/code&gt;, then your PDF reader will show a table of contents.
However, this table can only contain simple text, not mathematical expressions.
Here's a screenshot of what happens if we include math in section titles.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/latex/bad-heading.png"/&gt;
&lt;figcaption&gt;PDF opened in Google Chrome, showing garbled section titles in the table of contents.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For this reason, LaTeX issues a warning whenever math is included in section titles.
To fix this, supply alternative plain text for titles using &lt;code&gt;\texorpdfstring&lt;/code&gt;.
For example, change&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\subsection{$T_k^{d-1}(1-\eps)$-approximation in $n^{O_{\eps}(1)}$ time}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\subsection{\texorpdfstring{$T_k^{d-1}(1-\eps)$}{T\_k\^{}(d-1)(1-eps)}-approximation
in \texorpdfstring{$n^{O_{\eps}(1)}$}{n\^{}(O\_eps(1))} time}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/latex/good-heading.png"/&gt;
&lt;figcaption&gt;PDF opened in Google Chrome, where section titles in the table of contents
are readable.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="multi-file-projects-and-makefile"&gt;Multi-file projects and makefile&lt;a class="headerlink" href="#multi-file-projects-and-makefile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Suppose your document is split into multiple files, where the top-level file is called &lt;code&gt;main.tex&lt;/code&gt;,
and you &lt;code&gt;\input&lt;/code&gt; other files in &lt;code&gt;main.tex&lt;/code&gt;. When you use &lt;code&gt;pdflatex&lt;/code&gt; to compile &lt;code&gt;main.tex&lt;/code&gt;,
the output will be named &lt;code&gt;main.pdf&lt;/code&gt;.
If you use this naming scheme for all your documents, they will all be named &lt;code&gt;main.pdf&lt;/code&gt;.
This can be a problem, depending on how you navigate your filesystem.
There are 2 ways of fixing this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Change the output name&lt;/em&gt;:
    Suppose you want your document to be named &lt;code&gt;number-theory.pdf&lt;/code&gt;.
    Then instead of running&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pdflatex main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pdflatex -jobname=number-theory main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Change the input name&lt;/em&gt;:
    Name the top-level document &lt;code&gt;number-theory.tex&lt;/code&gt; instead of &lt;code&gt;main.tex&lt;/code&gt;.
    But this can make it hard for others (or you, after a long time)
    to figure out which is the top-level tex file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For both the options above, I recommend having a file named &lt;code&gt;makefile&lt;/code&gt; in your project,
where you specify the compilation instructions. Thus, you not only document
the compilation instructions, but you can also quickly compile the project
by running &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;
(if you're using a Unix-like system).&lt;/p&gt;
&lt;p&gt;Here's an example &lt;code&gt;makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;INAME = main
ONAME = number-theory
default:
    pdflatex -jobname=$(ONAME) $(INAME).tex
    bibtex $(ONAME).aux
    pdflatex -jobname=$(ONAME) $(INAME).tex
    pdflatex -jobname=$(ONAME) $(INAME).tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you just want to see the commands and not run them, run &lt;code&gt;make --dry-run&lt;/code&gt;.
For the above example, the output will be&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pdflatex -jobname=number-theory main.tex
bibtex number-theory.aux
pdflatex -jobname=number-theory main.tex
pdflatex -jobname=number-theory main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also add other commands to the makefile. For example, if you append&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;clean:
    rm -f *.{aux,bbl,blg,log,out,toc}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to the &lt;code&gt;makefile&lt;/code&gt;, then you can delete all intermediate files by running &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="tips-for-writing-papers-for-submission"&gt;Tips for writing papers for submission&lt;a class="headerlink" href="#tips-for-writing-papers-for-submission" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Publishers often have some requirements about the submission,
like the way metadata is formatted, page limit,
constraints on the tex source, bibliography format, etc.
Hence, authors need to make changes to their paper before submission.
This issue is exacerbated if the authors get one or more rejections and they resubmit elsewhere,
or they are also submitting to arXiv.&lt;/p&gt;
&lt;p&gt;To make this just-before-submission process easier, I formulated some best practices
and wrote programs to automate a few tasks.&lt;/p&gt;
&lt;h3 id="splitting-a-document-into-multiple-tex-files"&gt;Splitting a document into multiple tex files&lt;a class="headerlink" href="#splitting-a-document-into-multiple-tex-files" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A common practice is to split a LaTeX document into multiple files.
There is a file for each section, and they are all &lt;code&gt;\input&lt;/code&gt; into a main file (usually named &lt;code&gt;main.tex&lt;/code&gt;).
Some people, including me, like this approach for various reasons.&lt;/p&gt;
&lt;p&gt;One disadvantage of such a splitting is that publishers often ask for a single tex file.
Then we need to copy-and-paste everything into a single file.
But this need not be a deterrent, because I automated this process:
&lt;a href="https://github.com/sharmaeklavya2/tex-flatten"&gt;github:sharmaeklavya2/tex-flatten&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Different versions of a paper
(e.g., arXiv version, conference version, journal version)
have different ways of specifying metadata,
like title, abstract, authors, their affiliations, etc.
They may even even use different &lt;code&gt;\documentclass&lt;/code&gt;es.
However, the technical content is mostly the same.&lt;/p&gt;
&lt;p&gt;To make it convenient to switch formats,
it's best to separate the venue-specific information from venue-independent information.
I usually do this by having different files for each venue/format,
like &lt;code&gt;main.tex&lt;/code&gt;, &lt;code&gt;main-lipics.tex&lt;/code&gt;, &lt;code&gt;main-snjnl.tex&lt;/code&gt;, etc.
Each of these files only contain the venue-specific information,
and I &lt;code&gt;\input&lt;/code&gt; the venue-independent information, like
the tex files for each section, macros, abstract, etc. in the main file.
By invoking &lt;code&gt;pdflatex&lt;/code&gt; on each main document, I can get a PDF for every format.&lt;/p&gt;
&lt;h3 id="easily-convert-abstract-to-plain-text"&gt;Easily convert abstract to plain text&lt;a class="headerlink" href="#easily-convert-abstract-to-plain-text" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Publishers often ask for a plain-text version of the abstract.
If the abstract contains mathematical expressions or citations, they would need to be changed.
I don't like to manually do this editing before each submission.
So I wrote a tool (&lt;a href="https://github.com/sharmaeklavya2/tex2text"&gt;github:sharmaeklavya2/tex2text&lt;/a&gt;)
to automatically do this conversion for me. To do this,
I put my abstract in a separate file (like &lt;code&gt;abstract.tex&lt;/code&gt;) and &lt;code&gt;\input&lt;/code&gt; it into my document.
My tool reads &lt;code&gt;abstract.tex&lt;/code&gt; and outputs a plain text version by replacing LaTeX macros
by unicode/ascii characters.&lt;/p&gt;
&lt;h2 id="collaborating-with-a-git-user"&gt;Collaborating with a git user&lt;a class="headerlink" href="#collaborating-with-a-git-user" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you're using &lt;a href="https://en.wikipedia.org/wiki/Git"&gt;git&lt;/a&gt;,
or if you're using Overleaf and one of your co-authors uses git to access Overleaf,
follow these well-established git-friendly practices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid very long lines in your &lt;code&gt;.tex&lt;/code&gt; files.
    Perhaps you don't care because you have word-wrap on.
    But git tracks files line-by-line.
    Longer lines make it harder to do a &lt;code&gt;git diff&lt;/code&gt; to see what has changed.
    Split long lines into multiple smaller lines.&lt;/li&gt;
&lt;li&gt;Avoid trailing whitespace. Git marks them as warnings during &lt;code&gt;git diff&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category><category term="latex"></category></entry></feed>