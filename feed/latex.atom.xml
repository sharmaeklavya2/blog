<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eklavya's Blog - latex</title><link href="https://sharmaeklavya2.github.io/blog/" rel="alternate"></link><link href="https://sharmaeklavya2.github.io/blog/feed/latex.atom.xml" rel="self"></link><id>https://sharmaeklavya2.github.io/blog/</id><updated>2023-01-20T00:00:00+05:30</updated><entry><title>LaTeX tips</title><link href="https://sharmaeklavya2.github.io/blog/latex-tips.html" rel="alternate"></link><published>2022-11-13T00:00:00+05:30</published><updated>2023-01-20T00:00:00+05:30</updated><author><name>Eklavya Sharma</name></author><id>tag:sharmaeklavya2.github.io,2022-11-13:/blog/latex-tips.html</id><summary type="html">&lt;p&gt;This article lists LaTeX tips. The primary audience of this article is academic researchers who write math-heavy papers using LaTeX. To prevent stating facts that are either obvious or irrelevant, most of these tips are based on subtle 'mistakes' by other researchers and students, and mistakes by me pointed out by my collaborators.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article, I'll list tips for making LaTeX documents better and easing collaboration.&lt;/p&gt;
&lt;p&gt;The target audience of this article is academic researchers
who write math-heavy papers using LaTeX.
I don't want to offer tips that are either obvious or irrelevant,
so most of these tips are either based on subtle 'mistakes' by other researchers and students,
mistakes by me pointed out by my collaborators (thanks!),
or are tricks I discovered/invented to ease collaboration.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#general-tex-and-latex-best-practices"&gt;General TeX and LaTeX best practices&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#always-include-hyperref"&gt;Always include hyperref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-cleveref-or-autoref"&gt;Use cleveref or autoref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#do-not-use-obsolete-commands"&gt;Do not use obsolete commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-repeat-yourself"&gt;Don't repeat yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handle-the-warnings"&gt;Handle the warnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supply-alt-text-in-section-titles"&gt;Supply alt-text in section titles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multi-file-projects-and-makefile"&gt;Multi-file projects and makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-writing-papers-for-submission"&gt;Tips for writing papers for submission&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#splitting-a-document-into-multiple-tex-files"&gt;Splitting a document into multiple TeX files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#easily-convert-abstract-to-plain-text"&gt;Easily convert abstract to plain text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#collaboration"&gt;Collaboration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#long-lines"&gt;Long lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trailing-whitespace"&gt;Trailing whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-collaboration-tools"&gt;Online collaboration tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#acknowlegements"&gt;Acknowlegements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="general-tex-and-latex-best-practices"&gt;General TeX and LaTeX best practices&lt;a class="headerlink" href="#general-tex-and-latex-best-practices" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="always-include-hyperref"&gt;Always include &lt;code&gt;hyperref&lt;/code&gt;&lt;a class="headerlink" href="#always-include-hyperref" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always &lt;code&gt;\usepackage{hyperref}&lt;/code&gt; in your document.
It won't affect what your document looks like when you print it on paper,
but it will improve the digital reading experience,
like making references clickable and adding a table of contents.&lt;/p&gt;
&lt;p&gt;The order in which you load packages matters.
Most packages should be loaded before &lt;code&gt;hyperref&lt;/code&gt;&lt;sup&gt;&lt;a href="#cite-freek-pc"&gt;[1]&lt;/a&gt;&lt;/sup&gt;
(&lt;code&gt;cleveref&lt;/code&gt;, &lt;code&gt;algorithm&lt;/code&gt;, and &lt;code&gt;algpseudocode&lt;/code&gt; are the only exceptions I'm aware of).&lt;/p&gt;
&lt;p&gt;You can pass several options to hyperref either while loading the package
(&lt;code&gt;usepackage[options]{hyperref}&lt;/code&gt;) or later (&lt;code&gt;\hypersetup{options}&lt;/code&gt;).
Some useful options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bookmarksnumbered=true&lt;/code&gt;: Table of contents entries will be numbered.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypertexnames=false&lt;/code&gt;: To work around hyperref-related bugs in some packages.
    Example: &lt;a href="https://tex.stackexchange.com/a/670742"&gt;https://tex.stackexchange.com/a/670742&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidelinks&lt;/code&gt; and &lt;code&gt;colorlinks&lt;/code&gt;: &lt;code&gt;hyperref&lt;/code&gt;'s default behavior is to box links.
    Instead, if you want to color the links, use &lt;code&gt;colorlinks&lt;/code&gt;.
    If you want to neither box nor color links, use &lt;code&gt;hidelinks&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linkcolor&lt;/code&gt;, &lt;code&gt;citecolor&lt;/code&gt;, &lt;code&gt;urlcolor&lt;/code&gt;:
    specify colors to use for internal links, citations, and URLs, respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the following options in my old ArXiv papers
(the options I use now are a little more complicated):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\hypersetup{bookmarksnumbered=true,colorlinks,linkcolor=red,citecolor=red,urlcolor=blue}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="use-cleveref-or-autoref"&gt;Use cleveref or autoref&lt;a class="headerlink" href="#use-cleveref-or-autoref" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead of &lt;code&gt;\ref&lt;/code&gt;, use &lt;code&gt;\cref&lt;/code&gt; from the cleveref package,
or use &lt;code&gt;\autoref&lt;/code&gt; from the hyperref package.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cleveref&lt;/code&gt; allows you to write &lt;code&gt;\cref{lower-bound}&lt;/code&gt; instead of &lt;code&gt;Theorem \ref{lower-bound}&lt;/code&gt;,
because &lt;code&gt;cleveref&lt;/code&gt; automatically detects which kind of thing you're referring to.
If you ever decide to change a theorem to a lemma,
you won't have to find and replace every &lt;code&gt;Theorem \ref{lower-bound}&lt;/code&gt; to &lt;code&gt;Lemma \ref{lower-bound}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Official documentation: &lt;a href="https://mirrors.ctan.org/macros/latex/contrib/cleveref/cleveref.pdf"&gt;&lt;code&gt;CTAN:cleveref&lt;/code&gt;&lt;/a&gt;.
Useful options you may want to check out: &lt;code&gt;capitalize&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;.
Load &lt;code&gt;cleveref&lt;/code&gt; after &lt;code&gt;hyperref&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Name your references such that it's possible to know what kind of thing it is:
theorem, definition, section, figure, etc.
Preferably do this by using a prefix: &lt;code&gt;thm:&lt;/code&gt;, &lt;code&gt;defn:&lt;/code&gt;, &lt;code&gt;sec:&lt;/code&gt;, &lt;code&gt;fig:&lt;/code&gt;, etc.
(e.g., &lt;code&gt;\label{thm:lower-bound}&lt;/code&gt; instead of &lt;code&gt;\label{lower-bound}&lt;/code&gt;).
This makes it easier to know what is being referenced when reading the TeX source.
Don't use different prefixes for theorems, lemmas, observations, claims;
use &lt;code&gt;thm:&lt;/code&gt; for all of them (otherwise there's no point in using &lt;code&gt;cleveref&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\autoref&lt;/code&gt; is almost the same as &lt;code&gt;\cref&lt;/code&gt;.
These are the main differences that I found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;\cref&lt;/code&gt; we can pass multiple comma-separated labels,
    e.g., &lt;code&gt;\cref{thm:lower-bound,thm:upper-bound}&lt;/code&gt; outputs 'Theorems 1 and 2'
    (or 'Theorem 1 and Lemma 2', if &lt;code&gt;thm:upper-bound&lt;/code&gt; is a Lemma).
    &lt;code&gt;\autoref&lt;/code&gt; doesn't support this.&lt;/li&gt;
&lt;li&gt;Capitalization can be controlled in &lt;code&gt;cleveref&lt;/code&gt; using the &lt;code&gt;capitalize&lt;/code&gt; option or the &lt;code&gt;\Cref&lt;/code&gt; command.
    With &lt;code&gt;\autoref&lt;/code&gt;, some entities are capitalized and some are not.
    The defaults can be overriden by defining &lt;code&gt;\&amp;lt;entity&amp;gt;autorefname&lt;/code&gt;-style commands (see section 6 of the
    &lt;a href="http://mirrors.ctan.org/macros/latex/contrib/hyperref/doc/hyperref-doc.pdf"&gt;hyperref manual&lt;/a&gt; for details).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="do-not-use-obsolete-commands"&gt;Do not use obsolete commands&lt;a class="headerlink" href="#do-not-use-obsolete-commands" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://mirrors.ctan.org/info/l2tabu/english/l2tabuen.pdf"&gt;l2tabuen.pdf&lt;/a&gt;
lists obsolete commands and their newer alternatives. These are the most important ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;\[ … \]&lt;/code&gt; instead of &lt;code&gt;$$ … $$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;\frac&lt;/code&gt; instead of &lt;code&gt;\over&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dont-repeat-yourself"&gt;Don't repeat yourself&lt;a class="headerlink" href="#dont-repeat-yourself" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you ever find yourself writing the same paragraph/theorem/definition twice,
it means you're repeating yourself. Repetition is bad and should be avoided, because&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You'll have to keep the copies in sync. If you make a change at one place
    and forget to make it at other places, the copies will become inconsistent.&lt;/li&gt;
&lt;li&gt;Why would you say something that you've already said?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But sometimes there may be a good reason to repeat yourself.
Perhaps you're writing a long document and the reader may have forgotten things you said earlier.
But even then, there are ways of repeating yourself where you just say something
once in your TeX document and have it automatically appear at multiple places in your PDF document.
This would save you from accidentally creating inconsistent copies.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To restate theorems, definitions, examples, etc.,
    use the &lt;code&gt;restatable&lt;/code&gt; environment from the &lt;code&gt;thm-restate&lt;/code&gt; package.
    For more details, see &lt;a href="https://tex.stackexchange.com/q/51286"&gt;https://tex.stackexchange.com/q/51286&lt;/a&gt;
    or Section 1.4 of &lt;a href="http://mirrors.ctan.org/macros/latex/contrib/thmtools/doc/thmtools-manual.pdf"&gt;thmtools-manual.pdf&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Define a piece of text as a macro and then call it multiple times.&lt;/li&gt;
&lt;li&gt;Write something in a file and &lt;code&gt;\input&lt;/code&gt; that file at multiple places.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="handle-the-warnings"&gt;Handle the warnings&lt;a class="headerlink" href="#handle-the-warnings" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Please read the warnings that are generated by TeX/LaTeX.
Most of them indicate something wrong with your document.&lt;/p&gt;
&lt;p&gt;Overleaf has a pretty interface that extracts warnings from
the large amount of garbage that TeX outputs on &lt;code&gt;stdout&lt;/code&gt;.
If you're using TeX on your own computer via the command line,
you may want to use an external tool to extract warnings.
I made one such tool: &lt;a href="https://github.com/sharmaeklavya2/tex-filter"&gt;github:sharmaeklavya2/tex-filter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you feel that a warning is a 'false alarm', then try to hide/suppress that warning.
Otherwise the output is so full of false warnings that useful warnings are hard to spot.&lt;/p&gt;
&lt;h3 id="supply-alt-text-in-section-titles"&gt;Supply alt-text in section titles&lt;a class="headerlink" href="#supply-alt-text-in-section-titles" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you &lt;code&gt;\usepackage{hyperref}&lt;/code&gt;, then your PDF reader will show a table of contents.
However, this table can only contain simple text, not mathematical expressions.
Here's a screenshot of what happens if we include math in section titles.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/latex/bad-heading.png"/&gt;
&lt;figcaption&gt;PDF opened in Google Chrome, showing garbled section titles in the table of contents.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For this reason, LaTeX issues a warning whenever math is included in section titles.
To fix this, supply alternative plain text for titles using &lt;code&gt;\texorpdfstring&lt;/code&gt;.
For example, change&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\subsection{$T_k^{d-1}(1-\eps)$-approximation in $n^{O_{\eps}(1)}$ time}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\subsection{\texorpdfstring{$T_k^{d-1}(1-\eps)$}{T\_k\^{}(d-1)(1-eps)}-approximation
in \texorpdfstring{$n^{O_{\eps}(1)}$}{n\^{}(O\_eps(1))} time}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
&lt;img src="https://sharmaeklavya2.github.io/blog/img/latex/good-heading.png"/&gt;
&lt;figcaption&gt;PDF opened in Google Chrome, where section titles in the table of contents
are readable.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="multi-file-projects-and-makefile"&gt;Multi-file projects and makefile&lt;a class="headerlink" href="#multi-file-projects-and-makefile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Suppose your document is split into multiple files, where the top-level file is called &lt;code&gt;main.tex&lt;/code&gt;,
and you &lt;code&gt;\input&lt;/code&gt; other files in &lt;code&gt;main.tex&lt;/code&gt;. When you use &lt;code&gt;pdflatex&lt;/code&gt; to compile &lt;code&gt;main.tex&lt;/code&gt;,
the output will be named &lt;code&gt;main.pdf&lt;/code&gt;.
If you use this naming scheme for all your documents, they will all be named &lt;code&gt;main.pdf&lt;/code&gt;.
This may be a problem, depending on how you navigate your filesystem.
There are 2 ways of fixing this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Change the output name&lt;/em&gt;:
    Suppose you want your document to be named &lt;code&gt;number-theory.pdf&lt;/code&gt;.
    Then instead of running&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pdflatex main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pdflatex -jobname=number-theory main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Change the input name&lt;/em&gt;:
    Name the top-level document &lt;code&gt;number-theory.tex&lt;/code&gt; instead of &lt;code&gt;main.tex&lt;/code&gt;.
    But this can make it hard for others (or you, after a long time)
    to figure out which is the top-level TeX file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For both the options above, I recommend having a file named &lt;code&gt;makefile&lt;/code&gt; in your project,
where you specify the compilation instructions. Thus, you not only document
the compilation instructions, but you can also quickly compile the project
by running &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;
(if you're using a Unix-like system).&lt;/p&gt;
&lt;p&gt;Here's an example &lt;code&gt;makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;INAME = main
ONAME = number-theory
default:
    pdflatex -jobname=$(ONAME) $(INAME).tex
    bibtex $(ONAME).aux
    pdflatex -jobname=$(ONAME) $(INAME).tex
    pdflatex -jobname=$(ONAME) $(INAME).tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you just want to see the commands and not run them, run &lt;code&gt;make --dry-run&lt;/code&gt;.
For the above example, the output will be&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pdflatex -jobname=number-theory main.tex
bibtex number-theory.aux
pdflatex -jobname=number-theory main.tex
pdflatex -jobname=number-theory main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also add other commands to the makefile. For example, if you append&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;clean:
    rm -f *.{aux,bbl,blg,log,out,toc}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to the &lt;code&gt;makefile&lt;/code&gt;, then you can delete all intermediate files by running &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="tips-for-writing-papers-for-submission"&gt;Tips for writing papers for submission&lt;a class="headerlink" href="#tips-for-writing-papers-for-submission" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Publishers often have some requirements about the submission,
like the way metadata is formatted, page limit,
constraints on the TeX source, bibliography format, etc.
Hence, authors need to make changes to their paper before submission.
This issue is exacerbated if the authors get one or more rejections and they resubmit elsewhere,
or they are also submitting to arXiv.&lt;/p&gt;
&lt;p&gt;To make this just-before-submission process easier, I formulated some best practices
and wrote programs to automate a few tasks.&lt;/p&gt;
&lt;h3 id="splitting-a-document-into-multiple-tex-files"&gt;Splitting a document into multiple TeX files&lt;a class="headerlink" href="#splitting-a-document-into-multiple-tex-files" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A common practice is to split a LaTeX document into multiple files.
There is a file for each section, and they are all &lt;code&gt;\input&lt;/code&gt; into a main file (usually named &lt;code&gt;main.tex&lt;/code&gt;).
Some people, including me, like this approach for various reasons.&lt;/p&gt;
&lt;p&gt;One disadvantage of such a splitting is that publishers often ask for a single TeX file.
Then we need to copy-and-paste everything into a single file.
But this need not be a deterrent, because I automated this process:
&lt;a href="https://github.com/sharmaeklavya2/tex-flatten"&gt;github:sharmaeklavya2/tex-flatten&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Different versions of a paper
(e.g., arXiv version, conference version, journal version)
have different ways of specifying metadata,
like title, abstract, authors, their affiliations, etc.
They may even even use different &lt;code&gt;\documentclass&lt;/code&gt;es.
However, the technical content is mostly the same.&lt;/p&gt;
&lt;p&gt;To make it convenient to switch formats,
it's best to separate the venue-specific information from venue-independent information.
I usually do this by having different files for each venue/format,
like &lt;code&gt;main.tex&lt;/code&gt;, &lt;code&gt;main-lipics.tex&lt;/code&gt;, &lt;code&gt;main-snjnl.tex&lt;/code&gt;, etc.
Each of these files only contain the venue-specific information,
and I &lt;code&gt;\input&lt;/code&gt; the venue-independent information, like
the tex files for each section, macros, abstract, etc. in the main file.
By invoking &lt;code&gt;pdflatex&lt;/code&gt; on each main document, I can get a PDF for every format.&lt;/p&gt;
&lt;h3 id="easily-convert-abstract-to-plain-text"&gt;Easily convert abstract to plain text&lt;a class="headerlink" href="#easily-convert-abstract-to-plain-text" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Publishers often ask for a plain-text version of the abstract.
If the abstract contains mathematical expressions or citations, they would need to be changed.
I don't like to manually do this editing before each submission.
So I wrote a tool (&lt;a href="https://github.com/sharmaeklavya2/tex2text"&gt;github:sharmaeklavya2/tex2text&lt;/a&gt;)
to automatically do this conversion for me. To do this,
I put my abstract in a separate file (like &lt;code&gt;abstract.tex&lt;/code&gt;) and &lt;code&gt;\input&lt;/code&gt; it into my document.
My tool reads &lt;code&gt;abstract.tex&lt;/code&gt; and outputs a plain text version by replacing LaTeX macros
by unicode/ascii characters.&lt;/p&gt;
&lt;h2 id="collaboration"&gt;Collaboration&lt;a class="headerlink" href="#collaboration" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;People often have different preferences about how to write documents and collaborate,
and such differences can make collaboration less pleasant.
These differences often arise because of personal taste or choice of tools.
To deal with such issues, it is important to respect others' preferences
and know ways to handle conventions different from what one is used to.&lt;/p&gt;
&lt;h3 id="long-lines"&gt;Long lines&lt;a class="headerlink" href="#long-lines" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TeX joins consecutive non-empty lines by a space. So if your TeX code looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;This is the first paragraph.
It has 2 sentences.

This is the
second paragraph
with just a
single sentence.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Its output will look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the first paragraph. It has 2 sentences.&lt;/p&gt;
&lt;p&gt;This is the second paragraph with just a single sentence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some people, like me, prefer breaking up long lines in the TeX code into shorter lines
(usually at most 80 to 100 characters long). This is called &lt;em&gt;hard-wrapping&lt;/em&gt;.
This is useful for multiple reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Git"&gt;Git&lt;/a&gt; tracks files line-by-line.
If you or your collaborators use git, you'll be more likely to get merge conflicts
if your files have very long lines.&lt;/li&gt;
&lt;li&gt;To iterate over sentences in a paragraph, one usually needs to scan the paragraph for periods.
However, I break lines such that sentences usually begin at the beginning of lines.
Hence, I can iterate over sentences by just reading the first few characters of each line.&lt;/li&gt;
&lt;li&gt;Longer lines make it harder to use a diff tool (like &lt;code&gt;git diff&lt;/code&gt;) to see what has changed
between versions of a file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I recommend hard-wrapping. But as far as I know, most people don't hard wrap lines.
They may agree to hard wrap and then keep forgetting to do so, because old habits die hard.
They may also refuse to hard wrap text, and there may be good reasons for this.
For example, it can be irritating to edit TeX code that is hard-wrapped at
a width larger than the editor window width, and Overleaf has a very narrow editor window.
Hence, one needs to know how to deal with extremely long lines.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a diff tool that highlights intra-line diffs,
like &lt;a href="https://dandavison.github.io/delta/introduction.html"&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/a&gt;
or &lt;a href="https://github.com/mookid/diffr"&gt;&lt;code&gt;diffr&lt;/code&gt;&lt;/a&gt;.
See &lt;a href="https://stackoverflow.com/q/49278577/"&gt;https://stackoverflow.com/q/49278577/&lt;/a&gt; for more info.&lt;/li&gt;
&lt;li&gt;If you're using Vim, then prefixing &lt;code&gt;g&lt;/code&gt; to navigation commands
(i.e., changing &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; to &lt;code&gt;gh&lt;/code&gt;, &lt;code&gt;gj&lt;/code&gt;, &lt;code&gt;gk&lt;/code&gt;, &lt;code&gt;gl&lt;/code&gt;)
make them move by screen lines instead of source lines.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="trailing-whitespace"&gt;Trailing whitespace&lt;a class="headerlink" href="#trailing-whitespace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Trailing whitespace is when a line of text ends with a space,
or when a file ends with multiple newline characters.
Avoid trailing whitespaces.
&lt;code&gt;git diff&lt;/code&gt; and some text editors mark them as warnings.&lt;/p&gt;
&lt;h3 id="online-collaboration-tools"&gt;Online collaboration tools&lt;a class="headerlink" href="#online-collaboration-tools" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="overleaf"&gt;Overleaf&lt;a class="headerlink" href="#overleaf" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Overleaf is an online editor that allows multiple people to edit a LaTeX document simultaneously.
My initial impression of Overleaf (sometime in 2019) was bad, since it was slow
and hard to use with a bad internet connection.
It may have improved now, but I haven't tried it.&lt;/p&gt;
&lt;p&gt;Overleaf's best feature, in my opinion, is
&lt;a href="https://www.overleaf.com/learn/how-to/Using_Git_and_GitHub"&gt;the ability to pull and push via a git interface&lt;/a&gt;.
This way, I can just use my own text editor (vim) to edit files.
This is a premium feature, so everyone can't do this.&lt;/p&gt;
&lt;h4 id="git"&gt;Git&lt;a class="headerlink" href="#git" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Git"&gt;Git&lt;/a&gt; is a tool for collaborative version control.
It was written so that a large number of people
can work on a large software project at the same time.
Git is also useful for non-software projects, though, like LaTeX documents.&lt;/p&gt;
&lt;p&gt;Git has a steep learning curve.
(I used to be a professional software engineer, so I'm quite comfortable with git.)
What makes learning git difficult isn't just getting used to the terminal commands.
The real difficulty lies in realizing what git can do for you.
If you think of git as just an interface to sync a folder to Github,
you're missing the point, and won't be able to appreciate the utility of git.
&lt;span class="danger"&gt;(TODO: add list of resources to learn about git.)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For multiple people to work on a shared git repository, it needs to be hosted online.
&lt;a href="https://github.com"&gt;Github&lt;/a&gt; and &lt;a href="https://gitlab.com"&gt;Gitlab&lt;/a&gt; are viable hosting options.&lt;/p&gt;
&lt;h4 id="shared-online-folder"&gt;Shared online folder&lt;a class="headerlink" href="#shared-online-folder" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A shared online folder (like &lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; or &lt;a href="https://www.box.com"&gt;Box&lt;/a&gt;) is,
in my opinion, a quick-and-dirty way of collaboration.
With auto-syncing in Dropbox, authors need to be careful about concurrent access.
Dropbox saves past versions, but the kind of versioning it does is very rudimentary (especially compared to git).
Dropbox sends notifications to collaborators whenever someone makes a change.
If someone has a habit of constantly saving their work, collaborators
get flooded with notifications (except if they turn off those notifications entirely).&lt;/p&gt;
&lt;p&gt;When my collaborators use Dropbox, I treat it like a git remote.
I have a local git repository outside Dropbox.
Each time I need to edit the document, I use &lt;code&gt;rsync&lt;/code&gt; to copy
the shared Dropbox folder into my working directory, and then I commit those changes.
Then I continue working on my git repository as usual.
When I need to push, I use &lt;code&gt;rsync&lt;/code&gt; to copy my working directory to the shared Dropbox folder
(I first check diffs to ensure that I'm not overwriting others' work).
This way, I partially get the benefits of git and my collaborators don't even need to know about it.&lt;/p&gt;
&lt;h2 id="acknowlegements"&gt;Acknowlegements&lt;a class="headerlink" href="#acknowlegements" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.csa.iisc.ac.in/~arindamkhan/"&gt;Prof. Arindam Khan&lt;/a&gt;, my masters advisor,
told me about cleveref.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rgandre2.web.engr.illinois.edu"&gt;Robert Andrews&lt;/a&gt; told me about &lt;code&gt;\autoref&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li class="citation" id="cite-freek-pc"&gt;
&lt;!--&lt;span class="cite-name"&gt;freek-pc&lt;/span&gt;&lt;br&gt;--&gt;
&lt;span class="cite-authors"&gt;Freek Dijkstra.&lt;/span&gt;
&lt;cite class="cite-title"&gt;
&lt;a href="http://www.macfreek.nl/memory/LaTeX_package_conflicts"&gt;
LaTeX package conflicts.&lt;/a&gt;&lt;/cite&gt;
&lt;!--&lt;br&gt;&lt;span class="cite-source"&gt;&lt;/span&gt;--&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category><category term="latex"></category></entry></feed>